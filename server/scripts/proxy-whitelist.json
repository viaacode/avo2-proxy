{
  "GET_CONTENT_ASSET": "query getContentAssetOwnerId($url: String!) { app_content_assets(where: {path: {_eq: $url}}) { owner_id content_asset_type_id } }",
  "INSERT_CONTENT_ASSET": "mutation insertContentAsset($asset: app_content_assets_insert_input!) { insert_app_content_assets(objects: [$asset]) { affected_rows } }",
  "DELETE_CONTENT_ASSET": "mutation deleteContentAsset($url: String!) { delete_app_content_assets(where: {path: {_eq: $url}}) { affected_rows } }",
  "GET_PROFILE_IDS_BY_LDAP_IDS": "query getProfileIdsByLdapIds($userLdapUuids: [String!]!) { users_idp_map(where: {idp_user_id: {_in: $userLdapUuids}}) { local_user { profile { id } mail } } }",
  "GET_USER_INFO_BY_USER_EMAIL": "query getUserInfoByMail($email: String!) { users: shared_users(limit: 1, where: {mail: {_eq: $email}, profile: { is_deleted: { _eq: false } }}) { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } }",
  "GET_USER_INFO_BY_ID": "query getUserInfoById($userId: uuid!) { users: shared_users(limit: 1, where: {uid: {_eq: $userId}, profile: { is_deleted: { _eq: false } }}) { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } }",
  "GET_USER_BY_LDAP_UUID": "query getUserByLdapUuid($ldapUuid: String!) { users_idp_map(where: {idp: {_eq: HETARCHIEF}, idp_user_id: {_eq: $ldapUuid}}, limit: 1) { local_user { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } } }",
  "INSERT_USER": "mutation insertUser($user: shared_users_insert_input!) { insert_shared_users(objects: [$user]) { returning { uid } } }",
  "INSERT_PROFILE": "mutation insertProfile($profile: users_profiles_insert_input!) { insert_users_profiles(objects: [$profile]) { returning { id } } }",
  "GET_IDP_MAP": "query insertIdp($idpType: users_idps_enum!, $idpUserId: String!, $localUserId: uuid!) { users_idp_map(where: {idp_user_id: {_eq: $idpUserId}, local_user_id: {_eq: $localUserId}, idp: {_eq: $idpType}}) { id } }",
  "INSERT_IDP_MAP": "mutation insertIdp($idpMap: users_idp_map_insert_input!) { insert_users_idp_map(objects: [$idpMap]) { affected_rows } }",
  "DELETE_IDP_MAPS": "mutation deleteIdp($idpType: users_idps_enum!, $avoUserId: uuid!) { delete_users_idp_map(where: {idp: {_eq: $idpType}, local_user_id: {_eq: $avoUserId}}) { affected_rows } }",
  "GET_USER_BY_IDP_ID": "query getUserByIdpId($idpType: users_idps_enum!, $idpId: String!) { shared_users(where: {idpmaps: {idp: {_eq: $idpType}, idp_user_id: {_eq: $idpId}}, profile: { is_deleted: { _eq: false } }}) { uid } }",
  "GET_PROFILE_IDS_BY_USER_UID": "query getProfileIdsByUserUid($userUid: uuid!) { users_profiles(where: {user_id: {_eq: $userUid}, is_deleted: { _eq: false }}) { id } }",
  "LINK_USER_GROUPS_TO_PROFILE": "mutation linkUserGroupToProfile($objects: [users_profile_user_groups_insert_input!]!) { insert_users_profile_user_groups(objects: $objects) { returning { id } } }",
  "UNLINK_ALL_USER_GROUPS_FROM_PROFILE": "mutation unlinkAllUserGroupsFromProfile($profileId: uuid!) { delete_users_profile_user_groups(where: {user_profile_id: {_eq: $profileId}}) { returning { id } } }",
  "GET_USER_ROLE_BY_NAME": "query getUserRoles($roleName: String!) { shared_user_roles(where: {name: {_eq: $roleName}}) { id } }",
  "GET_USER_GROUPS": "query getUserGroups { users_groups { label id ldap_role } }",
  "GET_NOTIFICATION": "query getNotification($key: String!, $profileId: uuid!) { users_notifications(where: { profile_id: { _eq: $profileId }, key: { _eq: $key } }) { through_email through_platform } }",
  "UPDATE_USER_LAST_ACCESS_DATE": "mutation updateUserLastAccessDate($userUid: uuid!, $date: timestamptz) { update_shared_users(where: {uid: {_eq: $userUid}, profile: { is_deleted: { _eq: false } }}, _set: {last_access_at: $date, updated_at: $date}) { affected_rows } update_users_profiles(where: {user_id: {_eq: $userUid}, is_deleted: { _eq: false }}, _set: {updated_at: $date}) { affected_rows } }",
  "UPDATE_AVO_USER": "mutation updateUser($uid: uuid!, $user: shared_users_set_input!) { update_shared_users(where: {uid: {_eq: $uid}, profile: { is_deleted: { _eq: false } }}, _set: $user) { affected_rows } }",
  "HAS_CONTENT": "query hasContent($profileId: uuid) { has_public_collections: app_collections( limit: 1, where: { is_public: {_eq: true}, owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { id } has_private_collections: app_collections( limit: 1, where: { is_public: {_eq: false}, owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { id } has_assignments: app_assignments( limit: 1, where: { owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { uuid } }",
  "GET_ACTIVE_USERS": "query getActiveUsers($where: shared_users_bool_exp!, $offset: Int!, $limit: Int!) { shared_users(where: {_and: [$where, {profile: {id: {_is_null: false}}}]}, offset: $offset, limit: $limit) { first_name last_name created_at       last_access_at      is_blocked idpmaps { idp } mail profile { id stamboek business_category is_exception profile_user_group { group { label id } } has_public_collections: collections(limit: 1, where: {is_public: {_eq: true}}) { id } has_private_collections: collections(limit: 1, where: {is_public: {_eq: false}}) { id } has_assignments: assignments(limit: 1) { id } profile_classifications { key } profile_contexts { key } profile_organizations { organization_id unit_id } } } }",
  "COUNT_ACTIVE_USERS": "query getAssignmentResponses($where: shared_users_bool_exp!) { shared_users_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_BY_ID": "query getCollectionById($id: uuid!) { app_collections(where: { id: { _eq: $id }, is_deleted: { _eq: false } }) { id description description_long collection_fragments(order_by: { position: asc }) { use_custom_fields updated_at start_oc position id external_id end_oc custom_title custom_description created_at collection_uuid type thumbnail_path } updated_at type_id type { label id } title note briefing_id thumbnail_path publish_at owner_profile_id profile { alias title alternative_email avatar id stamboek updated_at user_id user: usersByuserId { id created_at expires_at external_uid first_name last_name mail uid updated_at role { id name label } } created_at updated_at organisation { logo_url name or_id } } is_public external_id depublish_at published_at created_at lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange updated_by { id user: usersByuserId { id first_name last_name role { id label } } } collection_labels { label id } relations(where: { predicate: { _eq: \"IS_COPY_OF\" } }) { object_meta { id title } } is_managed management { id current_status status_valid_until updated_at manager_profile_id manager { profile_id full_name mail } note } management_actualised_at: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } management_approved_at: QC( where: { qc_label: { _eq: EINDCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } management_language_check: QC( where: { qc_label: { _eq: TAALCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status assignee_profile_id assignee { profile_id full_name } comment } management_quality_check: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status } } }",
  "GET_ITEMS_BY_IDS": "query getItemById($ids: [bpchar!]) { app_item_meta(where: { external_id: { _in: $ids } }) { external_id, browse_path } }",
  "GET_COLLECTIONS_BY_IDS": "query getCollectionsByIds($ids: [uuid!]!) { items: app_collections(where: { id: { _in: $ids }, is_deleted: { _eq: false } }) { external_id id thumbnail_path updated_at organisation { logo_url name } title avo1_id collection_fragments_aggregate { aggregate { count } } } }",
  "GET_EXTERNAL_ID_BY_MEDIAMOSA_ID": "query getExternalIdByMediaMosaId($mediamosaId: String!) { migrate_reference_ids(where: { mediamosa_id: { _eq: $mediamosaId } }) { external_id id } }",
  "GET_COLLECTIONS_BY_AVO1_ID": "query getCollectionsByAvo1Id($avo1Id: String!) { items: app_collections(where: { avo1_id: { _eq: $avo1Id }, is_deleted: { _eq: false } }) { id } }",
  "GET_PUBLIC_COLLECTIONS": "query getPublicCollections { app_collections(where: {is_public: {_eq: true}, is_deleted: { _eq: false }}) { id updated_at type_id } }",
  "GET_COLLECTIONS_LINKED_TO_ASSIGNMENT": "query getAssignmentLinkedToCollection($collectionUuid: String!, $assignmentUuid: uuid!) { app_assignments(where: {content_id: {_eq: $collectionUuid}, uuid: {_eq: $assignmentUuid}, is_deleted: { _eq: false }}, limit: 1) { uuid } }",
  "GET_CONTENT_PAGE_BY_PATH": "query getContentPageByPath($path: String!) { app_content(where: { path: { _eq: $path }, is_deleted: { _eq: false } }) { content_type content_width created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path user_profile_id profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at user_group_ids content_content_labels { content_label { id label link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } }",
  "GET_ITEM_TILE_BY_ID": "query getItemTileById($id: bpchar!) { obj: app_item_meta(where: { external_id: { _eq: $id } }) { created_at duration browse_path thumbnail_path title description issued organisation { name logo_url } type { label id } item_collaterals(where: {description: {_eq: \"subtitle\"}}) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_ITEM_BY_EXTERNAL_ID": "query getItemByExternalId($externalId: bpchar!) { app_item_meta(where: { external_id: { _eq: $externalId } }) { browse_path } }",
  "GET_COLLECTION_TILE_BY_ID": "query getCollectionTileById($id: uuid!) { obj: app_collections(where: {id: {_eq: $id}, is_deleted: { _eq: false }}) { created_at title thumbnail_path type { label id } collection_fragments_aggregate { aggregate { count } } view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_CONTENT_PAGES_WITH_BLOCKS": "query getContentPagesWithBlocks( $where: app_content_bool_exp $offset: Int = 0 $limit: Int = 10 $orderBy: [app_content_order_by!] = {}, $labelIds: [Int!] = [], $orUserGroupIds: [app_content_content_labels_bool_exp] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { content_type created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at content_content_labels { content_label { id label link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } app_content_aggregate(where: $where) { aggregate { count } } app_content_labels(where: {id: {_in: $labelIds}}) { id content_content_labels_aggregate(where: {_or: $orUserGroupIds}) { aggregate { count } } } }",
  "GET_CONTENT_PAGES": "query getContentPages( $where: app_content_bool_exp, $offset: Int = 0, $limit: Int = 10, $orderBy: [app_content_order_by!] = {}, $labelIds: [Int!] = [], $orUserGroupIds: [app_content_content_labels_bool_exp] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { content_type created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { id label link_to } } } app_content_aggregate(where: $where) { aggregate { count } } app_content_labels(where: {id: {_in: $labelIds}}) { id content_content_labels_aggregate(where: {_or: $orUserGroupIds}) { aggregate { count } } } }",
  "GET_PUBLIC_CONTENT_PAGES": "query getPublicContentPages( $where: app_content_bool_exp ) { app_content(where: $where) { path updated_at } }",
  "UPDATE_CONTENT_PAGE_PUBLISH_DATES": "mutation publishContentPages($now: timestamptz, $publishedAt: timestamptz) {     publish_content_pages: update_app_content(       where: {         _or: [           {publish_at: {_lte: $now, _is_null: false}, depublish_at: {_gte: $now, _is_null: false}},           {publish_at: {_lte: $now, _is_null: false}, depublish_at: {_is_null: true}},           {publish_at: {_is_null: true}, published_at: {_gte: $now, _is_null: false}}         ],         published_at: {_is_null: true},         is_deleted: { _eq: false }       },       _set: {published_at: $publishedAt, is_public: true}     ) {       affected_rows     }     unpublish_content_pages: update_app_content(       where: {         depublish_at: {_lt: $now, _is_null: false},         is_public: {_eq: true}         is_deleted: { _eq: false }       },       _set: {is_public: false}     ) {       affected_rows     }   }",
  "GET_CONTENT_PAGES_BY_IDS": "query getContentAssetOwnerId($ids: [Int!]) { app_content(where: {id: {_in: $ids}, is_deleted: { _eq: false }}) { user_profile_id } }",
  "GET_CONTENT_PAGE_LABELS_BY_TYPE_AND_LABEL": "query getContentPageLabelsByTypeAndLabels($contentType: String!, $labels: [String!]!) { app_content_labels( where: { label: { _in: $labels }, content_type: { _eq: $contentType } } ) { label id } }",
  "GET_CONTENT_PAGE_LABELS_BY_TYPE_AND_ID": "query getContentPageLabelsByTypeAndIds($contentType: String!, $labelIds: [Int!]!) { app_content_labels(where: { id: { _in: $labelIds }, content_type: { _eq: $contentType } }) { label id } }",
  "GET_ASSIGNMENT_OWNER": "query getAssignmentOwnerId($assignmentUuid: uuid!) { app_assignments(where: {uuid: {_eq: $assignmentUuid}, is_deleted: { _eq: false }}) { owner_profile_id } }",
  "GET_COLLECTION_OWNER": "query getAssignmentOwnerId($collectionId: uuid!) { app_collections(where: {id: {_eq: $collectionId}, is_deleted: { _eq: false }}) { owner_profile_id } }",
  "GET_EDUCATION_LEVELS": "query getContexts { lookup_enum_lom_context { description } }",
  "INSERT_EVENTS": "mutation insertEventLogEntry($eventLogEntries: [avo_events_insert_input!]!) { insert_avo_events(objects: $eventLogEntries) { affected_rows } }",
  "GET_INTERACTIVE_TOUR_ROUTE_IDS": "query getInteractiveTourRouteIds { app_interactive_tour { page_id: page } }",
  "GET_INTERACTIVE_TOUR_WITH_STATUSES": "query getInteractiveTour( $routeId: String! $notificationKeyPrefix: String! $profileId: uuid! ) { app_interactive_tour(where: { page: { _eq: $routeId } }, order_by: { created_at: asc }) { steps id } users_notifications( where: { profile_id: { _eq: $profileId }, key: { _ilike: $notificationKeyPrefix } } ) { through_platform key } }",
  "GET_INTERACTIVE_TOUR_WITHOUT_STATUSES": "query getInteractiveTour($routeId: String!) { app_interactive_tour(where: { page: { _eq: $routeId } }, order_by: { created_at: asc }) { steps id } }",
  "GET_ITEM_THUMBNAIL_BY_EXTERNAL_ID": "query getItemThumbnailsByExternalIds($externalIds: [bpchar!]!) { app_item_meta(where: {external_id: {_in: $externalIds}}) { external_id thumbnail_path } }",
  "GET_NAVIGATION_ITEMS": "query getNavigationItems { app_content_nav_elements { content_path content_type link_target placement position id icon_name user_group_ids label updated_at description created_at content_id tooltip } }",
  "INSERT_ORGANIZATIONS": "mutation insertOrganizations($organizations: [shared_organisations_insert_input!]!) { insert_shared_organisations(objects: $organizations) { affected_rows } }",
  "DELETE_ORGANIZATIONS": "mutation deleteOrganizations { delete_shared_organisations(where: {}) { affected_rows } }",
  "GET_ORGANIZATIONS": "query getOrganisation($id: String!) { shared_organisations(where: {or_id: {_eq: $id}}) { or_id name logo_url } }",
  "DELETE_PROFILE_OBJECTS": "mutation deleteProfileObjects($profileId: uuid!) { delete_users_profile_organizations(where: { profile_id: { _eq: $profileId } }) { affected_rows } delete_users_profile_contexts(where: { profile_id: { _eq: $profileId } }) { affected_rows } delete_users_profile_classifications(where: { profile_id: { _eq: $profileId } }) { affected_rows } }",
  "UPDATE_PROFILE_INFO": "mutation updateProfileObject( $educationLevels: [users_profile_contexts_insert_input!]! $subjects: [users_profile_classifications_insert_input!]! $organizations: [users_profile_organizations_insert_input!]! $company_id: String $profileId: uuid! $alias: String $title: String $alternativeEmail: String $avatar: String $bio: String $stamboek: String $is_exception: Boolean! $userUuid: uuid! $firstName: String $lastName: String $business_category: String $updatedAt: timestamptz! ) { insert_users_profile_contexts(objects: $educationLevels) { affected_rows } insert_users_profile_classifications(objects: $subjects) { affected_rows } insert_users_profile_organizations(objects: $organizations) { affected_rows } update_users_profiles( where: { id: { _eq: $profileId }, is_deleted: { _eq: false } } _set: { title: $title alternative_email: $alternativeEmail avatar: $avatar bio: $bio stamboek: $stamboek company_id: $company_id is_exception: $is_exception business_category: $business_category updated_at: $updatedAt } ) { affected_rows } update_alias: update_users_profiles( where: { id: { _eq: $profileId }, is_deleted: { _eq: false }, alias: {_neq: $alias} } _set: { alias: $alias } ) { affected_rows }  update_shared_users(  where: {uid: {_eq: $userUuid}, profile: { is_deleted: { _eq: false } }},  _set: {  first_name: $firstName,  last_name: $lastName, updated_at: $updatedAt  }  ) { affected_rows } }",
  "GET_COLLECTION_TITLE_AND_DESCRIPTION_BY_ID": "query getCollectionById($id: uuid!) {   app_collections(where: {id: {_eq: $id}, is_deleted: { _eq: false }}) {     is_public     title     description   } }",
  "GET_SITE_VARIABLES_BY_NAME": "query getSiteVariables($name: String!) { app_site_variables(where: {name: {_ilike: $name }}) { name value } }",
  "GET_PROFILES_BY_STAMBOEK": "query getProfilesByStamboek($stamboekNumber: String!) { users_profiles(where: {stamboek: {_eq: $stamboekNumber}, is_deleted: { _eq: false }}, limit: 1) { stamboek } }",
  "BULK_STRIP_USERS": "mutation bulkStripUsers($profileIds: [uuid!]!) { delete_users_idp_map(where: {local_user: {profile: {id: {_in: $profileIds}}}}) { affected_rows } delete_users_notifications(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_classifications(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_organizations(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_app_collection_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_app_item_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } update_users_profiles( where: {id: {_in: $profileIds}, is_deleted: { _eq: false }}, _set: { alias: null, alternative_email: null, avatar: null, bio: null, business_category: null, company_id: null, is_exception: false, stamboek: null, title: null } ) { affected_rows } update_shared_users( where: {profile: {id: {_in: $profileIds}}}, _set: { expires_at: null, is_blocked: null, role_id: null, type_label: null, } ) { affected_rows } }",
  "BULK_SOFT_DELETE_USERS": "mutation bulkSoftDeleteProfiles($profileIds: [uuid!]!) { update_users_profiles(where: {id: {_in: $profileIds}}, _set: {is_deleted: true}) { affected_rows } }",
  "GET_USER_BLOCK_EVENTS": "query getUserInfoFromEvents($profileId: String) { lastBlockAction: avo_events(where: {action: {_eq: \"activate\"}, object_type: {_eq: \"profile\"}, object: {_eq: $profileId}}) { created_at } lastUnblockAction: avo_events(where: {action: {_eq: \"deactivate\"}, object_type: {_eq: \"profile\"}, object: {_eq: $profileId}}) { created_at } }",
  "UPDATE_NAME_AND_MAIL": "mutation updateNameAndMail($profileId: uuid!, $firstName: String!, $lastName: String!, $mail: String!) { update_shared_users(where: {profile: {id: {_eq: $profileId}}}, _set: {first_name: $firstName, last_name: $lastName, mail: $mail}) { affected_rows } }",
  "UPDATE_MAIL": "mutation updateNameAndMail($profileId: uuid!, $mail: String!) { update_shared_users(where: {profile: {id: {_eq: $profileId}}}, _set: {mail: $mail}) { affected_rows } }",
  "BULK_GET_EMAIL_ADDRESSES": "query getEmailAddresses($profileIds: [uuid!]!) { shared_users(where: {profile: {id: {_in: $profileIds}}}) { uid mail } }",
  "SOFT_DELETE_PUBLIC_CONTENT_FOR_PROFILES": "mutation bulkSoftDeletePublicContentForProfiles($profileIds: [uuid!]!, $now: timestamptz) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: true}}, _set: {is_deleted: true, updated_at: $now}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: true}}, _set: {is_deleted: true, updated_at: $now}) { affected_rows } }",
  "SOFT_DELETE_PRIVATE_CONTENT_FOR_PROFILES": "mutation bulkSoftDeletePrivateContentForProfiles($profileIds: [uuid!]!, $now: timestamptz) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: false}}, _set: {is_deleted: true, updated_at: $now}) { affected_rows } update_app_assignments(where: {owner_profile_id: {_in: $profileIds}}, _set: {is_deleted: true, updated_at: $now}) { affected_rows } delete_app_collection_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_app_item_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: false}}, _set: {is_deleted: true, updated_at: $now}) { affected_rows } }",
  "TRANSFER_PUBLIC_CONTENT_FOR_PROFILES": "mutation bulkTransferPublicContentForProfiles($profileIds: [uuid!]!, $transferToProfileId: uuid!, $now: timestamptz) { update_app_collections( where: { profile: {id: {_in: $profileIds}}, is_public: {_eq: true} }, _set: { owner_profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_content( where: { user_profile_id: {_in: $profileIds}, is_public: {_eq: true} }, _set: { user_profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } }",
  "TRANSFER_PRIVATE_CONTENT_FOR_PROFILES": "mutation bulkTransferPrivateContentForProfiles( $profileIds: [uuid!]!, $profileIdStrings: [String!]!, $transferToProfileId: uuid!, $transferToProfileIdString: String!, $now: timestamptz ) { update_app_collections( where: { profile: {id: {_in: $profileIds}}, is_public: {_eq: false} }, _set: { owner_profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_assignments( where: { owner_profile_id: {_in: $profileIds} }, _set: { owner_profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_collection_bookmarks( where: { profile_id: {_in: $profileIds} }, _set: { profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_item_bookmarks( where: { profile_id: {_in: $profileIds} }, _set: { profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_content( where: { user_profile_id: {_in: $profileIds}, is_public: {_eq: false} }, _set: { user_profile_id: $transferToProfileId, updated_at: $now } ) { affected_rows } update_app_assignment_labels( where: { owner_profile_id: {_in: $profileIds} }, _set: { owner_profile_id: $transferToProfileId, } ) { affected_rows } update_app_content_assets( where: { owner_id: {_in: $profileIdStrings} }, _set: { owner_id: $transferToProfileIdString, updated_at: $now } ) { affected_rows } }",
  "BULK_UPDATE_USER_BLOCKED_STATUS_BY_PROFILE_IDS": "mutation updateUserBlockedStatus($profileIds: [uuid!]!, $isBlocked: Boolean!) { update_shared_users( where: { profile: { id: { _in: $profileIds } } } _set: { is_blocked: $isBlocked } ) { affected_rows } }",
  "GET_EMAIL_USER_INFO": "query getEmailUserInfo($profileIds: [uuid!]!) { users_profiles(where: {id: {_in: $profileIds}, is_deleted: { _eq: false }}) { id user: usersByuserId { mail } profile_user_group { group { label id } } } }"
}