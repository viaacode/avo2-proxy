{
	"GET_COLLECTIONS": "query getCollections( $where: app_collections_bool_exp! $orderBy: [app_collections_order_by!]! $offset: Int! $limit: Int! ) { app_collections(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id type_id updated_at title description is_public created_at owner_profile_id profile { id profile_user_group { group { label id } } user: usersByuserId { id full_name } } updated_by { id user: usersByuserId { id full_name } } collection_labels { id label } counts { bookmarks in_assignment in_collection views copies } } app_collections_aggregate(where: $where) { aggregate { count } } }",
	"GET_COLLECTION_IDS": "query getCollections($where: app_collections_bool_exp!) { app_collections(where: $where) { id } }",
	"BULK_UPDATE_PUBLISH_STATE_FOR_COLLECTIONS": "mutation bulkUpdatePublishSTateForCollections( $isPublic: Boolean! $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds } } _set: { is_public: $isPublic updated_at: $now updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
	"BULK_UPDATE_AUTHOR_FOR_COLLECTIONS": "mutation bulkUpdateAuthorForCollections( $authorId: uuid! $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds } } _set: { owner_profile_id: $authorId updated_at: $now updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
	"BULK_DELETE_COLLECTIONS": "mutation bulkDeleteCollections( $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds } } _set: { is_deleted: true, updated_at: $now, updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
	"BULK_ADD_LABELS_TO_COLLECTIONS": "mutation bulkAddLabelsToCollections($labels: [app_collection_labels_insert_input!]!) { insert_app_collection_labels(objects: $labels) { affected_rows } }",
	"BULK_DELETE_LABELS_FROM_COLLECTIONS": "mutation bulkDeleteLabelsFromCollections($labels: [String!]!, $collectionIds: [uuid!]!) { delete_app_collection_labels( where: { label: { _in: $labels }, collection_uuid: { _in: $collectionIds } } ) { affected_rows } }",
	"BULK_UPDATE_DATE_AND_LAST_AUTHOR_COLLECTIONS": "mutation bulkUpdateDateAndLastAuthorCollections( $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds } } _set: { updated_at: $now, updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
	"INSERT_CONTENT_BLOCKS": "mutation insertContentBlocks($contentBlocks: [app_content_blocks_insert_input!]!) { insert_app_content_blocks(objects: $contentBlocks) { returning { id } } }",
	"UPDATE_CONTENT_BLOCK": "mutation updateContentBlock($id: Int!, $contentBlock: app_content_blocks_set_input!) { update_app_content_blocks(where: { id: { _eq: $id } }, _set: $contentBlock) { affected_rows } }",
	"DELETE_CONTENT_BLOCK": "mutation deleteContentBlock($id: Int!) { delete_app_content_blocks(where: { id: { _eq: $id } }) { affected_rows } }",
	"GET_CONTENT_PAGE_LABELS": "query getAllContentPageLabels( $where: app_content_labels_bool_exp! $offset: Int! $limit: Int! $orderBy: [app_content_labels_order_by!]! ) { app_content_labels(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { label content_type link_to created_at updated_at id } app_content_labels_aggregate(where: $where) { aggregate { count } } }",
	"DELETE_CONTENT_PAGE_LABEL": "mutation deleteContentPageLabelById($id: Int!) { delete_app_content_labels(where: { id: { _eq: $id } }) { affected_rows } }",
	"GET_CONTENT_PAGE_LABEL_BY_ID": "query getContentPageLabelById($id: Int!) { app_content_labels(where: { id: { _eq: $id } }) { label id content_type link_to created_at updated_at } }",
	"INSERT_CONTENT_PAGE_LABEL": "mutation insertContentPageLabel($contentPageLabel: app_content_labels_insert_input!) { insert_app_content_labels(objects: [$contentPageLabel]) { returning { id } } }",
	"UPDATE_CONTENT_PAGE_LABEL": "mutation insertContentPageLabel( $contentPageLabel: app_content_labels_set_input! $contentPageLabelId: Int! ) { update_app_content_labels( where: { id: { _eq: $contentPageLabelId } } _set: $contentPageLabel ) { affected_rows } }",
	"GET_CONTENT_PAGES": "query getContentPages( $where: app_content_bool_exp $offset: Int = 0 $limit: Int = 10 $orderBy: [app_content_order_by!] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { id content_type created_at depublish_at description seo_description meta_description thumbnail_path is_protected is_public path user_profile_id profile { organisation { or_id logo_url name } profile_user_group { group { id label } } user: usersByuserId { id full_name } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { id label link_to } } } app_content_aggregate(where: $where) { aggregate { count } } }",
	"GET_PUBLIC_PROJECT_CONTENT_PAGES": "query getPublicProjectContentPages($limit: Int = 20, $orderBy: [app_content_order_by!] = {}) { app_content( limit: $limit order_by: $orderBy where: { content_type: { _eq: PROJECT }, is_public: { _eq: true } } ) { path title } }",
	"GET_PUBLIC_CONTENT_PAGES_BY_TITLE": "query getPublicContentPageByTitle( $limit: Int = 20 $orderBy: [app_content_order_by!] = {} $where: app_content_bool_exp = {} ) { app_content(where: $where, limit: $limit, order_by: $orderBy) { path title } }",
	"GET_PUBLIC_PROJECT_CONTENT_PAGES_BY_TITLE": "query getPublicProjectContentPagesByTitle( $title: String! $limit: Int = 20 $orderBy: [app_content_order_by!] = {} ) { app_content( where: { title: { _ilike: $title } content_type: { _eq: PROJECT } is_public: { _eq: true } } limit: $limit order_by: $orderBy ) { path title } }",
	"GET_CONTENT_BY_ID": "query getContentById($id: Int!) { app_content(where: { id: { _eq: $id } }) { content_type content_width created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path user_profile_id profile { organisation { logo_url name or_id } profile_user_group { group { label id } } user: usersByuserId { id full_name mail } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { label id link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } }",
	"GET_CONTENT_TYPES": "query getContentTypes { lookup_enum_content_types { value description } }",
	"UPDATE_CONTENT_BY_ID": "mutation updateContentById($id: Int!, $contentPage: app_content_set_input!) { update_app_content(where: { id: { _eq: $id } }, _set: $contentPage) { affected_rows } }",
	"INSERT_CONTENT": "mutation insertContent($contentPage: app_content_insert_input!) { insert_app_content(objects: [$contentPage]) { returning { id } } }",
	"DELETE_CONTENT": "mutation deleteContent($id: Int!) { delete_app_content(where: { id: { _eq: $id } }) { affected_rows } }",
	"GET_PERMISSIONS_FROM_CONTENT_PAGE_BY_PATH": "query GetPermissionsFromContentPageByPath($path: String!) { app_content(where: { path: { _eq: $path } }) { user_group_ids } }",
	"GET_CONTENT_LABELS_BY_CONTENT_TYPE": "query getContentLabels($contentType: String!) { app_content_labels(where: { content_type: { _eq: $contentType } }) { id label content_type link_to } }",
	"INSERT_CONTENT_LABEL_LINKS": "mutation insertContentLabelLinks($objects: [app_content_content_labels_insert_input!]!) { insert_app_content_content_labels(objects: $objects) { affected_rows } }",
	"DELETE_CONTENT_LABEL_LINKS": "mutation deleteContentLabelLinks($contentPageId: Int!, $labelIds: [Int!]!) { delete_app_content_content_labels( where: { label_id: { _in: $labelIds }, content_id: { _eq: $contentPageId } } ) { affected_rows } }",
	"GET_INTERACTIVE_TOUR_BY_ID": "query getInteractiveTourById($id: Int!) { app_interactive_tour(where: { id: { _eq: $id } }) { name id page_id: page created_at updated_at steps } }",
	"GET_INTERACTIVE_TOURS": "query getInteractiveTours( $limit: Int! $offset: Int! $orderBy: [app_interactive_tour_order_by!]! $where: app_interactive_tour_bool_exp ) { app_interactive_tour(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) { name id page_id: page created_at updated_at } app_interactive_tour_aggregate(where: $where) { aggregate { count } } }",
	"INSERT_INTERACTIVE_TOUR": "mutation insertInteractiveTour($interactiveTour: app_interactive_tour_insert_input!) { insert_app_interactive_tour(objects: [$interactiveTour]) { returning { id } } }",
	"UPDATE_INTERACTIVE_TOUR": "mutation updateInteractiveTour( $interactiveTour: app_interactive_tour_set_input! $interactiveTourId: Int! ) { update_app_interactive_tour( where: { id: { _eq: $interactiveTourId } } _set: $interactiveTour ) { affected_rows } }",
	"DELETE_INTERACTIVE_TOUR": "mutation deleteInteractiveTour($interactiveTourId: Int!) { delete_app_interactive_tour(where: { id: { _eq: $interactiveTourId } }) { affected_rows } }",
	"GET_ITEMS_WITH_FILTERS": "query getItemsWithFilters( $where: app_item_meta_bool_exp! $orderBy: [app_item_meta_order_by!]! $offset: Int! $limit: Int! ) { app_item_meta(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { created_at depublish_at depublish_reason description duration expiry_date external_id uid is_deleted is_published issued lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name } publish_at published_at series title type { id label } updated_at note relations(where: { predicate: { _eq: \"IS_REPLACED_BY\" } }) { object } item_counts { bookmarks in_assignment in_collection plays views } } app_item_meta_aggregate(where: $where) { aggregate { count } } }",
	"GET_UNPUBLISHED_ITEMS_WITH_FILTERS": "query getUnpublishedItemsWithFilters( $where: shared_items_bool_exp! $orderBy: [shared_items_order_by!] $offset: Int! $limit: Int! ) { shared_items(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id pid updated_at title status item_meta { id external_id uid is_published is_deleted } } shared_items_aggregate(where: $where) { aggregate { count } } }",
	"GET_ITEM_BY_UUID": "query getItemByUuid($uuid: uuid!) { app_item_meta(where: { uid: { _eq: $uuid } }) { thumbnail_path created_at depublish_at depublish_reason description duration expiry_date external_id uid is_deleted is_published issued lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name } publish_at published_at series title type { id label } updated_at note relations(where: { predicate: { _eq: \"IS_REPLACED_BY\" } }) { object } item_collaterals(where: { description: { _eq: \"subtitle\" } }) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
	"UPDATE_ITEM_PUBLISH_STATE": "mutation updateItemPublishedState($itemUuid: uuid!, $isPublished: Boolean!) { update_app_item_meta( where: { uid: { _eq: $itemUuid } } _set: { is_published: $isPublished } ) { affected_rows } }",
	"UPDATE_ITEM_DEPUBLISH_REASON": "mutation updateItemDepublishReason($itemUuid: uuid!, $reason: String) { update_app_item_meta( where: { uid: { _eq: $itemUuid } } _set: { depublish_reason: $reason } ) { affected_rows } }",
	"UPDATE_ITEM_NOTES": "mutation updateItemNotes($itemUuid: uuid!, $note: String) { update_app_item_meta(where: { uid: { _eq: $itemUuid } }, _set: { note: $note }) { affected_rows } }",
	"GET_PUBLIC_ITEMS": "query getItems($limit: Int!) { app_item_meta( order_by: { title: asc } limit: $limit where: { is_published: { _eq: true } } ) { external_id title is_published is_deleted } }",
	"FETCH_ITEM_UUID_BY_EXTERNAL_ID": "query fetchItemUuidByExternalId($externalId: bpchar!) { app_item_meta(where: { external_id: { _eq: $externalId } }) { uid is_published is_deleted } }",
	"GET_PUBLIC_ITEMS_BY_TITLE_OR_EXTERNAL_ID": "query getItemsByTitleOrExternalId($title: String!, $externalId: bpchar!, $limit: Int!) { itemsByTitle: app_item_meta( order_by: { title: asc } limit: $limit where: { title: { _ilike: $title }, is_published: { _eq: true } } ) { external_id title is_published is_deleted } itemsByExternalId: app_item_meta( order_by: { title: asc } limit: $limit where: { external_id: { _eq: $externalId }, is_published: { _eq: true } } ) { external_id title is_published is_deleted } }",
	"GET_ITEM_BY_EXTERNAL_ID": "query getItemByExternalId($externalId: bpchar!) { app_item_meta( where: { external_id: { _eq: $externalId } is_deleted: { _eq: false } is_published: { _eq: true } } ) { created_at depublish_at description duration expiry_date external_id id uid is_deleted is_orphaned is_published issued issued_edtf lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name logo_url } publish_at published_at series thumbnail_path title type { id label } type_id updated_at note item_collaterals(where: { description: { _eq: \"subtitle\" } }) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
	"GET_ITEM_DEPUBLISH_REASON": "query getDepublishReasonByExternalId($externalId: bpchar!) { app_item_meta( where: { external_id: { _eq: $externalId } is_deleted: { _eq: false } is_published: { _eq: false } } ) { depublish_reason is_published is_deleted } }",
	"GET_DISTINCT_SERIES": "query getDistinctSeries { app_item_meta(distinct_on: series, where: { series: { _is_null: false } }) { series is_published is_deleted } }",
	"DELETE_ITEM_FROM_COLLECTIONS_BOOKMARKS": "mutation deleteItemFromCollectionBookmarksAndAssignments( $itemExternalId: String! $itemUid: uuid! ) { delete_app_collection_fragments(where: { external_id: { _eq: $itemExternalId } }) { affected_rows } delete_app_item_bookmarks(where: { item_id: { _eq: $itemUid } }) { affected_rows } }",
	"REPLACE_ITEM_IN_COLLECTIONS_BOOKMARKS_AND_ASSIGNMENTS": "mutation replaceItemInCollectionsBookmarksAndAssignments( $oldItemUid: uuid! $oldItemExternalId: String! $newItemUid: uuid! $newItemExternalId: String! ) { update_app_collection_fragments( where: { external_id: { _eq: $oldItemExternalId } } _set: { external_id: $newItemExternalId, start_oc: null, end_oc: null } ) { affected_rows } update_app_item_bookmarks( where: { item_id: { _eq: $oldItemUid } } _set: { item_id: $newItemUid } ) { affected_rows } update_app_assignments( where: { content_id: { _eq: $oldItemExternalId }, content_label: { _eq: ITEM } } _set: { content_id: $newItemExternalId } ) { affected_rows } }",
	"UPDATE_SHARED_ITEMS_STATUS": "mutation setSharedItemsStatus($pids: [String!]!, $status: item_publishing_status) { update_shared_items(where: { pid: { _in: $pids } }, _set: { status: $status }) { affected_rows } }",
	"GET_MENUS": "query getNavElements { app_content_nav_elements(distinct_on: placement, order_by: { placement: asc }) { id description placement tooltip } }",
	"GET_MENU_ITEMS_BY_PLACEMENT": "query getMenuItemsByPlacement($placement: String!) { app_content_nav_elements( order_by: { position: asc } where: { placement: { _eq: $placement } } ) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
	"GET_MENU_ITEM_BY_ID": "query getMenuItemById($id: Int!) { app_content_nav_elements(where: { id: { _eq: $id } }) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
	"UPDATE_MENU_ITEM_BY_ID": "mutation updateMenuItemById($id: Int!, $menuItem: app_content_nav_elements_set_input!) { update_app_content_nav_elements(where: { id: { _eq: $id } }, _set: $menuItem) { affected_rows } }",
	"INSERT_MENU_ITEM": "mutation insertMenuItem($menuItem: app_content_nav_elements_insert_input!) { insert_app_content_nav_elements(objects: [$menuItem]) { returning { id } } }",
	"DELETE_MENU_ITEM": "mutation deleteMenuItemById($id: Int!) { delete_app_content_nav_elements(where: { id: { _eq: $id } }) { affected_rows } }",
	"GET_PERMISSION_GROUPS": "query getAllPermissionGroups( $where: users_permission_groups_bool_exp! $offset: Int! $limit: Int! $orderBy: [users_permission_groups_order_by!]! ) { users_permission_groups(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { label description created_at updated_at id } users_permission_groups_aggregate(where: $where) { aggregate { count } } }",
	"DELETE_PERMISSION_GROUP": "mutation deletePermissionGroupById($id: Int!) { delete_users_permission_groups(where: { id: { _eq: $id } }) { affected_rows } }",
	"GET_PERMISSION_GROUP_BY_ID": "query getPermissionGroupById($id: Int!) { users_permission_groups(where: { id: { _eq: $id } }) { label id description created_at updated_at permission_group_user_permissions(order_by: { permission: { description: asc } }) { permissions { id label description } } } }",
	"GET_ALL_PERMISSIONS": "query getAllPermissions { users_permissions(order_by: { description: asc }) { id label description } }",
	"ADD_PERMISSIONS_TO_GROUP": "mutation insertPermissionInPermissionGroup( $objs: [users_permission_group_user_permissions_insert_input!]! ) { insert_users_permission_group_user_permissions(objects: $objs) { affected_rows } }",
	"REMOVE_PERMISSIONS_FROM_GROUP": "mutation removePermissionInPermissionGroup($permissionGroupId: Int!, $permissionIds: [Int!]!) { delete_users_permission_group_user_permissions( where: { user_permission_group_id: { _eq: $permissionGroupId } user_permission_id: { _in: $permissionIds } } ) { affected_rows } }",
	"INSERT_PERMISSIONS_GROUP": "mutation insertPermissionGroup($permissionGroup: users_permission_groups_insert_input!) { insert_users_permission_groups(objects: [$permissionGroup]) { returning { id } } }",
	"UPDATE_PERMISSIONS_GROUP": "mutation updatePermissionGroup( $permissionGroup: users_permission_groups_set_input! $permissionGroupId: Int! ) { update_users_permission_groups( where: { id: { _eq: $permissionGroupId } } _set: $permissionGroup ) { affected_rows } }",
	"GET_TRANSLATIONS": "query getTranslations { app_site_variables(where: { name: { _ilike: \"translations-%\" } }) { name value } }",
	"UPDATE_TRANSLATIONS": "mutation updateTranslations($name: String!, $translations: app_site_variables_set_input!) { update_app_site_variables(where: { name: { _eq: $name } }, _set: $translations) { affected_rows } }",
	"GET_USER_GROUP_BY_ID": "query getUserGroupById($id: Int!) { users_groups(where: { id: { _eq: $id } }) { label id description created_at updated_at group_user_permission_groups(order_by: { permission_group: { label: asc } }) { permission_group { label id created_at description updated_at permission_group_user_permissions( order_by: { permission: { description: asc } } ) { permission { label description id } } } } } }",
	"GET_USER_GROUPS_WITH_FILTERS": "query getUserGroups( $limit: Int! $offset: Int! $orderBy: [users_groups_order_by!]! $where: users_groups_bool_exp! ) { users_groups(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) { label id created_at description updated_at } users_groups_aggregate(where: $where) { aggregate { count } } }",
	"GET_ALL_PERMISSION_GROUPS": "query getAllPermissionGroups { users_permission_groups { id label description created_at updated_at } }",
	"ADD_PERMISSION_GROUPS_TO_USER_GROUP": "mutation linkPermissionGroupToUserGroup( $objs: [users_group_user_permission_groups_insert_input!]! ) { insert_users_group_user_permission_groups(objects: $objs) { affected_rows } }",
	"REMOVE_PERMISSION_GROUPS_FROM_USER_GROUP": "mutation unlinkPermissionGroupFromUserGroup($userGroupId: Int!, $permissionGroupIds: [Int!]!) { delete_users_group_user_permission_groups( where: { user_group_id: { _eq: $userGroupId } user_permission_group_id: { _in: $permissionGroupIds } } ) { affected_rows } }",
	"INSERT_USER_GROUP": "mutation insertUserGroup($userGroup: users_groups_insert_input!) { insert_users_groups(objects: [$userGroup]) { returning { id } } }",
	"UPDATE_USER_GROUP": "mutation updateUserGroup($userGroup: users_groups_set_input!, $userGroupId: Int!) { update_users_groups(where: { id: { _eq: $userGroupId } }, _set: $userGroup) { affected_rows } }",
	"DELETE_USER_GROUP": "mutation deleteUserGroup($userGroupId: Int!) { delete_users_groups(where: { id: { _eq: $userGroupId } }) { affected_rows } }",
	"GET_USER_BY_ID": "query getUserById($id: uuid!) { users_profiles(offset: 0, limit: 1, where: { id: { _eq: $id } }) { id user: usersByuserId { uid id first_name last_name last_access_at mail is_blocked idpmaps { id idp idp_user_id } } avatar alias title business_category stamboek updated_at created_at bio alternative_email company_id organisation { logo_url name or_id } is_exception title profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } profile_user_group { group { id label group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label id } } id label } } } } } }",
	"GET_USERS": "query getUsers( $offset: Int! $limit: Int! $orderBy: [users_summary_view_order_by!]! $where: users_summary_view_bool_exp! ) { users_summary_view(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { user_id full_name first_name last_name mail last_access_at is_blocked profile_id stamboek acc_created_at group_id group_name company_name is_exception business_category idps { idp } classifications { key } contexts { key } organisations { organization_id unit_id } } users_summary_view_aggregate(where: $where) { aggregate { count } } }",
	"GET_PROFILE_IDS": "query getProfileIds($where: shared_users_bool_exp!) { shared_users(where: $where) { profile { id } } }",
	"GET_PROFILE_NAMES": "query getProfileNames($profileIds: [uuid!]!) { users_profiles(where: { id: { _in: $profileIds } }) { id user: usersByuserId { id full_name mail } } }",
	"BULK_ADD_SUBJECTS_TO_PROFILES": "mutation bulkAddSubjectsToProfiles($subjects: [users_profile_classifications_insert_input!]!) { insert_users_profile_classifications(objects: $subjects) { affected_rows } }",
	"BULK_DELETE_SUBJECTS_FROM_PROFILES": "mutation bulkDeleteSubjectsFromProfiles($subjects: [String!]!, $profileIds: [uuid!]!) { delete_users_profile_classifications( where: { key: { _in: $subjects }, profile_id: { _in: $profileIds } } ) { affected_rows } }",
	"GET_DISTINCT_BUSINESS_CATEGORIES": "query getDistinctBusinessCategories { users_profiles( distinct_on: business_category where: { business_category: { _is_null: false } } ) { business_category } }",
	"GET_IDPS": "query getIdps { users_idps { value } }",
	"GET_CONTENT_COUNTS_FOR_USERS": "query getContentCountsForUsers($profileIds: [uuid!]!) { publicCollections: app_collections_aggregate( where: { profile: { id: { _in: $profileIds } }, is_public: { _eq: true } } ) { aggregate { count } } publicContentPages: app_content_aggregate( where: { user_profile_id: { _in: $profileIds }, is_public: { _eq: true } } ) { aggregate { count } } privateCollections: app_collections_aggregate( where: { profile: { id: { _in: $profileIds } }, is_public: { _eq: false } } ) { aggregate { count } } assignments: app_assignments_aggregate(where: { owner_profile_id: { _in: $profileIds } }) { aggregate { count } } collectionBookmarks: app_collection_bookmarks_aggregate( where: { profile_id: { _in: $profileIds } } ) { aggregate { count } } itemBookmarks: app_item_bookmarks_aggregate(where: { profile_id: { _in: $profileIds } }) { aggregate { count } } privateContentPages: app_content_aggregate( where: { user_profile_id: { _in: $profileIds }, is_public: { _eq: false } } ) { aggregate { count } } }",
	"GET_ASSIGNMENT_BY_ID": "query getAssignmentsById($id: Int!) { app_assignments(where: { id: { _eq: $id } }) { answer_url assignment_assignment_tags { assignment_tag { color_enum_value color_override enum_color { label value } id label } } assignment_responses { id } assignment_type available_at class_room content_id content_label content_layout created_at deadline_at description id is_archived is_collaborative is_deleted title updated_at owner_profile_id } }",
	"GET_ASSIGNMENT_BY_CONTENT_ID_AND_TYPE": "query getAssignmentsByContentIdAndType( $contentId: String! $contentType: lookup_enum_assignment_content_labels_enum! ) { app_assignments( where: { content_id: { _eq: $contentId } content_label: { _eq: $contentType } is_deleted: { _eq: false } } ) { id title profile { user: usersByuserId { id first_name last_name } } is_archived } }",
	"GET_ASSIGNMENTS_BY_OWNER_ID": "query getAssignmentsByOwner( $owner_profile_id: uuid $offset: Int = 0 $limit: Int $order: app_assignments_order_by! = { deadline_at: desc } $filter: [app_assignments_bool_exp] ) { app_assignments( where: { owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } _and: $filter } offset: $offset limit: $limit order_by: [$order] ) { assignment_assignment_tags(order_by: { assignment_tag: { label: asc } }) { assignment_tag { color_enum_value color_override enum_color { label value } id label } } assignment_responses { id } assignment_type class_room deadline_at id is_archived is_deleted title owner_profile_id created_at } count: app_assignments_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } _or: $filter } ) { aggregate { count } } }",
	"GET_ASSIGNMENTS_BY_RESPONSE_OWNER_ID": "query getAssignmentsByResponseOwnerId( $owner_profile_id: String! $offset: Int = 0 $limit: Int $filter: [app_assignments_bool_exp] $order: app_assignments_order_by! ) { app_assignments( where: { assignment_responses: { owner_profile_ids: { _has_key: $owner_profile_id } } is_deleted: { _eq: false } _and: $filter } limit: $limit offset: $offset order_by: [$order] ) { assignment_assignment_tags { assignment_tag { color_enum_value color_override enum_color { label value } id label } } assignment_responses { id submitted_at } assignment_type class_room deadline_at id is_archived is_deleted title created_at owner_profile_id profile { user: usersByuserId { first_name last_name id } avatar organisation { logo_url name or_id } id } } count: app_assignments_aggregate( where: { assignment_responses: { owner_profile_ids: { _has_key: $owner_profile_id } } is_deleted: { _eq: false } _or: $filter } ) { aggregate { count } } }",
	"GET_ASSIGNMENT_RESPONSES": "query getAssignmentResponses($profileId: String!, $assignmentId: Int) { app_assignment_responses( where: { owner_profile_ids: { _has_key: $profileId } assignment_id: { _eq: $assignmentId } } ) { id assignment_id } }",
	"GET_ASSIGNMENT_WITH_RESPONSE": "query getAssignmentWithResponse($assignmentId: Int!, $pupilUuid: String!) { assignments: app_assignments( where: { id: { _eq: $assignmentId } is_deleted: { _eq: false } is_archived: { _eq: false } } order_by: [{ deadline_at: desc }] ) { assignment_assignment_tags { id assignment_tag { color_enum_value color_override enum_color { label value } id label } } assignment_responses(where: { owner_profile_ids: { _has_key: $pupilUuid } }) { id created_at submitted_at owner_profile_ids assignment_id collection_uuid } assignment_type class_room deadline_at id is_archived is_deleted title description content_id content_label content_layout created_at updated_at answer_url owner_profile_id profile { id organisation { logo_url name or_id } profile_user_group { group { label id } } user: usersByuserId { id first_name last_name } } } }",
	"INSERT_ASSIGNMENT": "mutation insertAssignment($assignment: app_assignments_insert_input!) { insert_app_assignments(objects: [$assignment]) { affected_rows returning { id } } }",
	"UPDATE_ASSIGNMENT": "mutation updateAssignmentById($id: Int!, $assignment: app_assignments_set_input!) { update_app_assignments(where: { id: { _eq: $id } }, _set: $assignment) { affected_rows } }",
	"UPDATE_ASSIGNMENT_ARCHIVE_STATUS": "mutation toggleAssignmentArchiveStatus($id: Int!, $archived: Boolean!) { update_app_assignments(where: { id: { _eq: $id } }, _set: { is_archived: $archived }) { affected_rows } }",
	"UPDATE_ASSIGNMENT_RESPONSE_SUBMITTED_STATUS": "mutation toggleAssignmentResponseSubmitStatus($id: Int!, $submittedAt: timestamptz) { update_app_assignment_responses( where: { id: { _eq: $id } } _set: { submitted_at: $submittedAt } ) { affected_rows } }",
	"DELETE_ASSIGNMENT": "mutation deleteAssignmentById($id: Int!) { delete_app_assignments(where: { id: { _eq: $id } }) { affected_rows } }",
	"INSERT_ASSIGNMENT_RESPONSE": "mutation insertAssignmentResponse( $assignmentResponses: [app_assignment_responses_insert_input!]! ) { insert_app_assignment_responses(objects: $assignmentResponses) { affected_rows returning { id created_at submitted_at owner_profile_ids assignment_id collection_uuid } } }",
	"GET_COLLECTION_BY_ID": "query getCollectionById($id: uuid!) { app_collections(where: { id: { _eq: $id } }) { id description description_long collection_fragments(order_by: { position: asc }) { use_custom_fields updated_at start_oc position id external_id end_oc custom_title custom_description created_at collection_uuid type thumbnail_path } updated_at type_id type { label id } title note thumbnail_path publish_at owner_profile_id profile { alias title alternative_email avatar id stamboek updated_at profile_user_group { group { label id } } user_id user: usersByuserId { id created_at expires_at external_uid first_name last_name mail uid updated_at } created_at updated_at organisation { logo_url name or_id } } is_public external_id depublish_at created_at lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange updated_by { id user: usersByuserId { id first_name last_name profile { profile_user_group { group { label id } } } } } collection_labels { label id } relations(where: { predicate: { _eq: \"IS_COPY_OF\" } }) { object_meta { id title } } } }",
	"UPDATE_COLLECTION": "mutation updateCollectionById($id: uuid!, $collection: app_collections_set_input!) { update_app_collections(where: { id: { _eq: $id } }, _set: $collection) { affected_rows } }",
	"INSERT_COLLECTION": "mutation insertCollection($collection: app_collections_insert_input!) { insert_app_collections(objects: [$collection]) { affected_rows returning { id title collection_fragments(order_by: { position: asc }) { id } } } }",
	"DELETE_COLLECTION": "mutation deleteCollectionById($id: uuid!) { delete_app_collections(where: { id: { _eq: $id } }) { affected_rows } }",
	"UPDATE_COLLECTION_FRAGMENT": "mutation updateCollectionFragmentById( $id: Int! $fragment: app_collection_fragments_set_input! ) { update_app_collection_fragments(where: { id: { _eq: $id } }, _set: $fragment) { affected_rows } }",
	"DELETE_COLLECTION_FRAGMENT": "mutation deleteCollectionFragmentById($id: Int!) { delete_app_collection_fragments(where: { id: { _eq: $id } }) { affected_rows } }",
	"INSERT_COLLECTION_FRAGMENTS": "mutation insertCollectionFragment( $id: Int! $fragments: [app_collection_fragments_insert_input!]! ) { insert_app_collection_fragments(objects: $fragments) { affected_rows returning { id } } }",
	"GET_COLLECTIONS_BY_OWNER": "query getCollectionsByOwner( $owner_profile_id: uuid $type_id: Int $offset: Int = 0 $limit: Int $order: [app_collections_order_by!] = { updated_at: desc } ) { app_collections( where: { type_id: { _eq: $type_id }, owner_profile_id: { _eq: $owner_profile_id } } offset: $offset limit: $limit order_by: $order ) { id updated_at type_id type { label id } title publish_at owner_profile_id profile { id alias title alternative_email avatar organisation { logo_url name or_id } created_at stamboek updated_at user_id user: usersByuserId { id first_name last_name profile { profile_user_group { group { label id } } } } } is_public external_id depublish_at created_at thumbnail_path view_counts_aggregate { aggregate { sum { count } } } } }",
	"GET_PUBLIC_COLLECTIONS": "query getCollections($limit: Int!, $typeId: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId }, is_public: { _eq: true } } limit: $limit ) { id title } }",
	"GET_PUBLIC_COLLECTIONS_BY_ID": "query getCollections($id: uuid!, $typeId: Int!, $limit: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId }, id: { _eq: $id }, is_public: { _eq: true } } limit: $limit ) { id title } }",
	"GET_PUBLIC_COLLECTIONS_BY_TITLE": "query getCollections($title: String!, $typeId: Int!, $limit: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId } title: { _ilike: $title } is_public: { _eq: true } } limit: $limit ) { id title } }",
	"GET_COLLECTION_TITLES_BY_OWNER": "query getCollectionNamesByOwner($owner_profile_id: uuid) { app_collections( where: { type_id: { _eq: 3 }, owner_profile_id: { _eq: $owner_profile_id } } order_by: { updated_at: desc } ) { id title } }",
	"GET_BUNDLE_TITLES_BY_OWNER": "query getCollectionNamesByOwner($owner_profile_id: uuid) { app_collections( where: { type_id: { _eq: 4 }, owner_profile_id: { _eq: $owner_profile_id } } order_by: { updated_at: desc } ) { id title } }",
	"GET_BUNDLES_CONTAINING_COLLECTION": "query getPublishedBundlesContainingCollection($id: String!) { app_collections( where: { is_public: { _eq: true }, collection_fragments: { external_id: { _eq: $id } } } ) { id title } }",
	"INSERT_COLLECTION_LABELS": "mutation insertCollectionLabels($objects: [app_collection_labels_insert_input!]!) { insert_app_collection_labels(objects: $objects) { affected_rows } }",
	"DELETE_COLLECTION_LABELS": "mutation deleteCollectionLabels($labels: [String!]!, $collectionId: uuid!) { delete_app_collection_labels( where: { label: { _in: $labels }, collection_uuid: { _eq: $collectionId } } ) { affected_rows } }",
	"GET_QUALITY_LABELS": "query getQualityLabels { lookup_enum_collection_labels { description value } }",
	"GET_COLLECTION_BY_TITLE_OR_DESCRIPTION": "query getCollectionByTitleOrDescription( $title: String! $description: String! $collectionId: uuid! $typeId: Int ) { collectionByTitle: app_collections( where: { title: { _eq: $title } is_deleted: { _eq: false } is_public: { _eq: true } id: { _neq: $collectionId } type_id: { _eq: $typeId } } limit: 1 ) { id } collectionByDescription: app_collections( where: { description: { _eq: $description } is_deleted: { _eq: false } is_public: { _eq: true } id: { _neq: $collectionId } type_id: { _eq: $typeId } } limit: 1 ) { id } }",
	"GET_COLLECTIONS_BY_FRAGMENT_ID": "query getCollectionsByItemUuid($fragmentId: String!) { app_collections(where: { collection_fragments: { external_id: { _eq: $fragmentId } } }) { id title is_public profile { user: usersByuserId { first_name last_name id } id organisation { name } } } }",
	"INSERT_COLLECTION_RELATION": "mutation insertCollectionRelation( $objectId: uuid! $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { insert_app_collection_relations( objects: [{ object: $objectId, subject: $subjectId, predicate: $relationType }] ) { returning { id } } }",
	"GET_EDUCATION_LEVELS": "query getEducationLevels { lookup_enum_lom_context { description } }",
	"GET_SUBJECTS": "query getSubjects { lookup_enum_lom_classification { description } }",
	"GET_ASSIGNMENT_LABELS_BY_PROFILE_ID": "query getAssignmentLabels($profileId: uuid!) { app_assignment_labels( where: { owner_profile_id: { _eq: $profileId } } order_by: { label: asc } ) { color_enum_value color_override label id enum_color { label value } } }",
	"INSERT_ASSIGNMENT_LABELS": "mutation insertAssignmentLabels($objects: [app_assignment_labels_insert_input!]!) { insert_app_assignment_labels(objects: $objects) { returning { id } } }",
	"UPDATE_ASSIGNMENT_LABEL": "mutation updateAssignmentLabels( $label: String! $colorEnumValue: lookup_enum_colors_enum! $profileId: uuid! $labelId: Int! ) { update_app_assignment_labels( _set: { label: $label, color_enum_value: $colorEnumValue } where: { owner_profile_id: { _eq: $profileId }, id: { _eq: $labelId } } ) { affected_rows } }",
	"DELETE_ASSIGNMENT_LABELS": "mutation deleteAssignmentLabel($profileId: uuid!, $labelIds: [Int!]!) { delete_app_assignment_labels( where: { owner_profile_id: { _eq: $profileId }, id: { _in: $labelIds } } ) { affected_rows } delete_app_assignment_assignment_tags(where: { assignment_tag_id: { _in: $labelIds } }) { affected_rows } }",
	"LINK_ASSIGNMENT_LABELS_FROM_ASSIGNMENT": "mutation linkAssignmentLabelsToAssignment( $objects: [app_assignment_assignment_tags_insert_input!]! ) { insert_app_assignment_assignment_tags(objects: $objects) { affected_rows } }",
	"UNLINK_ASSIGNMENT_LABELS_FROM_ASSIGNMENT": "mutation unlinkAssignmentLabelsFromAssignment($assignmentId: Int!, $labelIds: [Int!]!) { delete_app_assignment_assignment_tags( where: { assignment_id: { _eq: $assignmentId }, assignment_tag_id: { _in: $labelIds } } ) { affected_rows } }",
	"GET_ALL_ASSIGNMENT_LABEL_COLORS": "query getAllAssignmentLabelColors { lookup_enum_colors { label value } }",
	"INSERT_ITEM_BOOKMARK": "mutation insertItemBookmark($bookmarkItem: app_item_bookmarks_insert_input!) { insert_app_item_bookmarks { affected_rows } }",
	"INSERT_COLLECTION_BOOKMARK": "mutation insertCollectionBookmark($bookmarkItem: app_collection_bookmarks_insert_input!) { insert_app_collection_bookmarks { affected_rows } }",
	"REMOVE_ITEM_BOOKMARK": "mutation deleteItemBookmark($itemUuid: uuid!, $profileId: uuid) { delete_app_item_bookmarks( where: { item_id: { _eq: $itemUuid }, profile_id: { _eq: $profileId } } ) { affected_rows } }",
	"REMOVE_COLLECTION_BOOKMARK": "mutation deleteCollectionBookmark($collectionUuid: uuid!, $profileId: uuid) { delete_app_collection_bookmarks( where: { collection_uuid: { _eq: $collectionUuid }, profile_id: { _eq: $profileId } } ) { affected_rows } }",
	"INCREMENT_ITEM_VIEWS": "mutation increaseItemViews($itemUuid: uuid!) { update_app_item_views(where: { item_id: { _eq: $itemUuid } }, _inc: { count: 1 }) { affected_rows } }",
	"INCREMENT_COLLECTION_VIEWS": "mutation increaseCollectionViews($collectionUuid: uuid!) { update_app_collection_views( where: { collection_uuid: { _eq: $collectionUuid } } _inc: { count: 1 } ) { affected_rows } }",
	"INIT_ITEM_VIEWS": "mutation insertInitialItemViewCount($itemUuid: uuid!) { insert_app_item_views(objects: [{ count: 1, item_id: $itemUuid }]) { affected_rows } }",
	"INIT_COLLECTION_VIEWS": "mutation insertInitialCollectionViewCount($collectionUuid: uuid!) { insert_app_collection_views(objects: [{ count: 1, collection_uuid: $collectionUuid }]) { affected_rows } }",
	"INCREMENT_ITEM_PLAYS": "mutation increaseItemPlays($itemUuid: uuid!) { update_app_item_plays(where: { item_id: { _eq: $itemUuid } }, _inc: { count: 1 }) { affected_rows } }",
	"INCREMENT_COLLECTION_PLAYS": "mutation increaseCollectionPlays($collectionUuid: uuid!) { update_app_collection_plays( where: { collection_uuid: { _eq: $collectionUuid } } _inc: { count: 1 } ) { affected_rows } }",
	"GET_ITEM_VIEWS": "query getItemViewCount($itemUuid: uuid!) { app_item_meta(where: { uid: { _eq: $itemUuid } }) { view_counts { count } is_deleted is_published } }",
	"GET_COLLECTION_VIEWS": "query getCollectionViewCount($collectionUuid: uuid!) { app_collections(where: { id: { _eq: $collectionUuid } }) { view_counts { count } } }",
	"GET_ITEM_PLAYS": "query getItemPlayCount($itemUuid: uuid!) { app_item_meta(where: { uid: { _eq: $itemUuid } }) { play_counts { count } is_published is_deleted } }",
	"GET_COLLECTION_PLAYS": "query getCollectionPlayCount($collectionUuid: uuid!) { app_collections(where: { uid: { _eq: $collectionUuid } }) { play_counts { count } } }",
	"INIT_ITEM_PLAYS": "mutation insertInitialItemPlayCount($itemUuid: uuid!) { insert_app_item_plays(objects: [{ count: 1, item_id: $itemUuid }]) { affected_rows } }",
	"INIT_COLLECTION_PLAYS": "mutation insertInitialCollectionPlayCount($collectionUuid: uuid!) { insert_app_collection_plays(objects: [{ count: 1, collection_uuid: $collectionUuid }]) { affected_rows } }",
	"GET_ITEM_BOOKMARK_VIEW_PLAY_COUNTS": "query getItemBookmarkViewPlayCounts($itemUuid: uuid!, $profileId: uuid) { app_item_plays(where: { item_id: { _eq: $itemUuid } }, limit: 1) { count } app_item_views(where: { item_id: { _eq: $itemUuid } }, limit: 1) { count } app_item_bookmarks_aggregate(where: { item_id: { _eq: $itemUuid } }) { aggregate { count } } app_item_bookmarks( where: { profile_id: { _eq: $profileId }, item_id: { _eq: $itemUuid } } limit: 1 ) { id } }",
	"GET_COLLECTION_BOOKMARK_VIEW_PLAY_COUNTS": "query getCollectionBookmarkViewPlayCounts($collectionUuid: uuid!, $profileId: uuid) { app_collection_views(where: { collection_uuid: { _eq: $collectionUuid } }, limit: 1) { count } app_collection_plays(where: { collection_uuid: { _eq: $collectionUuid } }, limit: 1) { count } app_collection_bookmarks_aggregate(where: { collection_uuid: { _eq: $collectionUuid } }) { aggregate { count } } app_collection_bookmarks( where: { profile_id: { _eq: $profileId }, collection_uuid: { _eq: $collectionUuid } } limit: 1 ) { id } }",
	"GET_MULTIPLE_ITEM_VIEW_COUNTS": "query getMultipleItemViewCounts($uuids: [uuid!]) { items: app_item_views(where: { item_id: { _in: $uuids } }) { count id: item_id } }",
	"GET_MULTIPLE_COLLECTION_VIEW_COUNTS": "query getMultipleCollectionViewCounts($uuids: [uuid!]) { items: app_collection_views(where: { collection_uuid: { _in: $uuids } }) { count id: collection_uuid } }",
	"GET_BOOKMARKS_FOR_USER": "query getBookmarksForUser($profileId: uuid!) { app_item_bookmarks(where: { profile_id: { _eq: $profileId } }) { bookmarkedItem { title thumbnail_path issued item { external_id item_meta { is_deleted is_published type { label } } } view_counts { count } } item_id created_at } app_collection_bookmarks(where: { profile_id: { _eq: $profileId } }) { bookmarkedCollection { title thumbnail_path created_at type_id view_counts { count } } collection_uuid created_at } }",
	"GET_BOOKMARK_STATUSES": "query getBookmarkStatuses($profileId: uuid!, $itemUuids: [uuid!]!, $collectionUuids: [uuid!]!) { app_collection_bookmarks( where: { profile_id: { _eq: $profileId }, collection_uuid: { _in: $collectionUuids } } ) { collection_uuid } app_item_bookmarks( where: { profile_id: { _eq: $profileId }, item_id: { _in: $itemUuids } } ) { item_id } }",
	"GET_NOTIFICATION": "query getNotification($key: String!, $profileId: uuid!) { users_notifications(where: { profile_id: { _eq: $profileId }, key: { _eq: $key } }) { through_email through_platform } }",
	"INSERT_NOTIFICATION": "mutation insertNotification( $key: String! $profileId: uuid! $throughEmail: Boolean! $throughPlatform: Boolean! ) { insert_users_notifications( objects: { key: $key profile_id: $profileId through_email: $throughEmail through_platform: $throughPlatform } ) { affected_rows } }",
	"UPDATE_NOTIFICATION": "mutation updateNotification( $key: String! $profileId: uuid! $throughEmail: Boolean! $throughPlatform: Boolean! ) { update_users_notifications( where: { profile_id: { _eq: $profileId }, key: { _eq: $key } } _set: { through_email: $throughEmail, through_platform: $throughPlatform } ) { affected_rows } }",
	"GET_ALL_ORGANISATIONS": "query getAllOrganisations { shared_organisations(order_by: { name: asc }) { or_id name logo_url } }",
	"GET_DISTINCT_ORGANISATIONS": "query getDistinctOrganisations { app_item_meta(distinct_on: org_id, where: { org_id: { _is_null: false } }) { organisation { or_id name logo_url } is_published is_deleted } }",
	"GET_USERS_IN_COMPANY": "query getUsersByCompanyId($companyId: String!) { users_profiles( order_by: { usersByuserId: { first_name: asc } } where: { company_id: { _eq: $companyId } } ) { id user: usersByuserId { uid full_name mail is_blocked last_access_at } profile_user_group { group { id label } } } }",
	"FETCH_COLLECTION_RELATIONS_BY_OBJECTS": "query getCollectionRelationsByObject( $objectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_collection_relations( where: { object: { _in: $objectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
	"FETCH_ITEM_RELATIONS_BY_OBJECTS": "query getItemRelationsByObject( $objectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_item_relations( where: { object: { _in: $objectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
	"FETCH_COLLECTION_RELATIONS_BY_SUBJECTS": "query getCollectionRelationsBySubject( $subjectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_collection_relations( where: { subject: { _in: $subjectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
	"FETCH_ITEM_RELATIONS_BY_SUBJECTS": "query getItemRelationsBySubject( $subjectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_item_relations( where: { subject: { _in: $subjectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
	"INSERT_ITEM_RELATION": "mutation insertItemRelation( $objectId: uuid! $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { insert_app_item_relations( objects: [{ object: $objectId, subject: $subjectId, predicate: $relationType }] ) { returning { id } } }",
	"DELETE_COLLECTION_RELATIONS_BY_OBJECT": "mutation deleteItemRelationsByObject( $objectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_collection_relations( where: { object: { _eq: $objectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
	"DELETE_ITEM_RELATIONS_BY_OBJECT": "mutation deleteItemRelationsByObject( $objectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_item_relations( where: { object: { _eq: $objectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
	"DELETE_COLLECTION_RELATIONS_BY_SUBJECT": "mutation deleteItemRelationsBySubject( $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_collection_relations( where: { subject: { _eq: $subjectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
	"DELETE_ITEM_RELATIONS_BY_SUBJECT": "mutation deleteItemRelationsBySubject( $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_item_relations( where: { subject: { _eq: $subjectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
	"GET_WORKSPACE_TAB_COUNTS": "query getWorkspaceTabCounts($owner_profile_id: uuid) { collection_counts: app_collections_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id }, type_id: { _eq: 3 } } ) { aggregate { count } } bundle_counts: app_collections_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id }, type_id: { _eq: 4 } } ) { aggregate { count } } assignment_counts: app_assignments_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id }, is_archived: { _eq: false } } ) { aggregate { count } } collection_bookmark_counts: app_collection_bookmarks_aggregate( where: { profile_id: { _eq: $owner_profile_id } } ) { aggregate { count } } item_bookmark_counts: app_item_bookmarks_aggregate( where: { profile_id: { _eq: $owner_profile_id } } ) { aggregate { count } } }"
}
