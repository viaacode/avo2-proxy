{
  "GET_COLLECTIONS": "query getCollections( $where: app_collections_bool_exp! $orderBy: [app_collections_order_by!]! $offset: Int! $limit: Int! ) { app_collections(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id type_id updated_at title description is_public created_at owner_profile_id profile { id profile_user_group { group { label id } } user: usersByuserId { id full_name } } updated_by { id user: usersByuserId { id full_name } } collection_labels { id label } counts { bookmarks in_assignment in_collection views copies } } app_collections_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_ACTUALISATION": "query getCollectionActualisations( $where: app_collections_bool_exp! $orderBy: [app_collections_order_by!]! $offset: Int! $limit: Int! ) { app_collections(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id title created_at owner_profile_id profile { id profile_user_group { group { label id } } user: usersByuserId { id full_name } } updated_by { id user: usersByuserId { id full_name } } updated_at is_public collection_labels { id label } management { id current_status status_valid_until manager { full_name } } management_actualised_at: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } management_approved_at: QC( where: { qc_label: { _eq: EINDCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } } app_collections_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_QUALITY_CHECK": "query getCollectionQualityCheck( $where: app_collections_bool_exp! $orderBy: [app_collections_order_by!]! $offset: Int! $limit: Int! ) { app_collections(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id title created_at owner_profile_id profile { id profile_user_group { group { label id } } user: usersByuserId { id full_name } } updated_by { id user: usersByuserId { id full_name } } updated_at is_public collection_labels { id label } management_language_check: QC( where: { qc_label: { _eq: TAALCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status } management_quality_check: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status } management_approved_at: QC( where: { qc_label: { _eq: EINDCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } } app_collections_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_MARCOM": "query getCollectionMarcom( $where: app_collections_bool_exp! $orderBy: [app_collections_order_by!]! $offset: Int! $limit: Int! ) { app_collections(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id title created_at owner_profile_id profile { id profile_user_group { group { label id } } user: usersByuserId { id full_name } } updated_by { id user: usersByuserId { id full_name } } updated_at is_public collection_labels { id label } } app_collections_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_IDS": "query getCollectionsByIds($where: app_collections_bool_exp!) { app_collections(where: $where) { id } }",
  "BULK_UPDATE_PUBLISH_STATE_FOR_COLLECTIONS": "mutation bulkUpdatePublishSTateForCollections( $isPublic: Boolean! $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds }, is_deleted: { _eq: false } } _set: { is_public: $isPublic updated_at: $now updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
  "BULK_UPDATE_AUTHOR_FOR_COLLECTIONS": "mutation bulkUpdateAuthorForCollections( $authorId: uuid! $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds }, is_deleted: { _eq: false } } _set: { owner_profile_id: $authorId updated_at: $now updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
  "BULK_DELETE_COLLECTIONS": "mutation bulkDeleteCollections( $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds }, is_deleted: { _eq: false } } _set: { is_deleted: true, updated_at: $now, updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
  "BULK_ADD_LABELS_TO_COLLECTIONS": "mutation bulkAddLabelsToCollections($labels: [app_collection_labels_insert_input!]!) { insert_app_collection_labels(objects: $labels) { affected_rows } }",
  "BULK_DELETE_LABELS_FROM_COLLECTIONS": "mutation bulkDeleteLabelsFromCollections($labels: [String!]!, $collectionIds: [uuid!]!) { delete_app_collection_labels( where: { label: { _in: $labels }, collection_uuid: { _in: $collectionIds } } ) { affected_rows } }",
  "BULK_UPDATE_DATE_AND_LAST_AUTHOR_COLLECTIONS": "mutation bulkUpdateDateAndLastAuthorCollections( $collectionIds: [uuid!]! $now: timestamptz! $updatedByProfileId: uuid! ) { update_app_collections( where: { id: { _in: $collectionIds }, is_deleted: { _eq: false } } _set: { updated_at: $now, updated_by_profile_id: $updatedByProfileId } ) { affected_rows } }",
  "INSERT_CONTENT_BLOCKS": "mutation insertContentBlocks($contentBlocks: [app_content_blocks_insert_input!]!) { insert_app_content_blocks(objects: $contentBlocks) { returning { id } } }",
  "UPDATE_CONTENT_BLOCK": "mutation updateContentBlock($id: Int!, $contentBlock: app_content_blocks_set_input!) { update_app_content_blocks(where: { id: { _eq: $id } }, _set: $contentBlock) { affected_rows } }",
  "DELETE_CONTENT_BLOCK": "mutation deleteContentBlock($id: Int!) { delete_app_content_blocks(where: { id: { _eq: $id } }) { affected_rows } }",
  "GET_CONTENT_PAGE_LABELS": "query getAllContentPageLabels( $where: app_content_labels_bool_exp! $offset: Int! $limit: Int! $orderBy: [app_content_labels_order_by!]! ) { app_content_labels(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { label content_type link_to created_at updated_at id } app_content_labels_aggregate(where: $where) { aggregate { count } } }",
  "DELETE_CONTENT_PAGE_LABEL": "mutation deleteContentPageLabelById($id: Int!) { delete_app_content_labels(where: { id: { _eq: $id } }) { affected_rows } }",
  "GET_CONTENT_PAGE_LABEL_BY_ID": "query getContentPageLabelById($id: Int!) { app_content_labels(where: { id: { _eq: $id } }) { label id content_type link_to created_at updated_at } }",
  "INSERT_CONTENT_PAGE_LABEL": "mutation insertContentPageLabel($contentPageLabel: app_content_labels_insert_input!) { insert_app_content_labels(objects: [$contentPageLabel]) { returning { id } } }",
  "UPDATE_CONTENT_PAGE_LABEL": "mutation insertContentPageLabel( $contentPageLabel: app_content_labels_set_input! $contentPageLabelId: Int! ) { update_app_content_labels( where: { id: { _eq: $contentPageLabelId } } _set: $contentPageLabel ) { affected_rows } }",
  "GET_CONTENT_PAGES": "query getContentPages( $where: app_content_bool_exp $offset: Int = 0 $limit: Int = 10 $orderBy: [app_content_order_by!] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { id content_type created_at depublish_at description seo_description meta_description thumbnail_path is_protected is_public path user_profile_id profile { organisation { or_id logo_url name } profile_user_group { group { id label } } user: usersByuserId { id full_name } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { id label link_to } } } app_content_aggregate(where: $where) { aggregate { count } } }",
  "GET_PUBLIC_PROJECT_CONTENT_PAGES": "query getPublicProjectContentPages($limit: Int = 20, $orderBy: [app_content_order_by!] = {}) { app_content( limit: $limit order_by: $orderBy where: { content_type: { _eq: PROJECT } is_public: { _eq: true } is_deleted: { _eq: false } } ) { path title } }",
  "GET_PUBLIC_CONTENT_PAGES_BY_TITLE": "query getPublicContentPageByTitle( $limit: Int = 20 $orderBy: [app_content_order_by!] = {} $where: app_content_bool_exp = {} ) { app_content(where: $where, limit: $limit, order_by: $orderBy) { path title } }",
  "GET_PUBLIC_PROJECT_CONTENT_PAGES_BY_TITLE": "query getPublicProjectContentPagesByTitle( $title: String! $limit: Int = 20 $orderBy: [app_content_order_by!] = {} ) { app_content( where: { title: { _ilike: $title } content_type: { _eq: PROJECT } is_public: { _eq: true } is_deleted: { _eq: false } } limit: $limit order_by: $orderBy ) { path title } }",
  "GET_CONTENT_BY_ID": "query getContentById($id: Int!) { app_content(where: { id: { _eq: $id }, is_deleted: { _eq: false } }) { content_type content_width created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path user_profile_id profile { organisation { logo_url name or_id } profile_user_group { group { label id } } user: usersByuserId { id full_name mail } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { label id link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } }",
  "GET_CONTENT_TYPES": "query getContentTypes { lookup_enum_content_types { value description } }",
  "UPDATE_CONTENT_BY_ID": "mutation updateContentById($id: Int!, $contentPage: app_content_set_input!) { update_app_content( where: { id: { _eq: $id }, is_deleted: { _eq: false } } _set: $contentPage ) { affected_rows } }",
  "INSERT_CONTENT": "mutation insertContent($contentPage: app_content_insert_input!) { insert_app_content(objects: [$contentPage]) { returning { id } } }",
  "SOFT_DELETE_CONTENT": "mutation softDeleteContent($id: Int!) { update_app_content(where: { id: { _eq: $id } }, _set: { is_deleted: true }) { affected_rows } }",
  "GET_PERMISSIONS_FROM_CONTENT_PAGE_BY_PATH": "query GetPermissionsFromContentPageByPath($path: String!) { app_content(where: { path: { _eq: $path }, is_deleted: { _eq: false } }) { user_group_ids } }",
  "GET_CONTENT_LABELS_BY_CONTENT_TYPE": "query getContentLabels($contentType: String!) { app_content_labels(where: { content_type: { _eq: $contentType } }) { id label content_type link_to } }",
  "INSERT_CONTENT_LABEL_LINKS": "mutation insertContentLabelLinks($objects: [app_content_content_labels_insert_input!]!) { insert_app_content_content_labels(objects: $objects) { affected_rows } }",
  "DELETE_CONTENT_LABEL_LINKS": "mutation deleteContentLabelLinks($contentPageId: Int!, $labelIds: [Int!]!) { delete_app_content_content_labels( where: { label_id: { _in: $labelIds }, content_id: { _eq: $contentPageId } } ) { affected_rows } }",
  "GET_INTERACTIVE_TOUR_BY_ID": "query getInteractiveTourById($id: Int!) { app_interactive_tour(where: { id: { _eq: $id } }) { name id page_id: page created_at updated_at steps } }",
  "GET_INTERACTIVE_TOURS": "query getInteractiveTours( $limit: Int! $offset: Int! $orderBy: [app_interactive_tour_order_by!]! $where: app_interactive_tour_bool_exp ) { app_interactive_tour(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) { name id page_id: page created_at updated_at } app_interactive_tour_aggregate(where: $where) { aggregate { count } } }",
  "INSERT_INTERACTIVE_TOUR": "mutation insertInteractiveTour($interactiveTour: app_interactive_tour_insert_input!) { insert_app_interactive_tour(objects: [$interactiveTour]) { returning { id } } }",
  "UPDATE_INTERACTIVE_TOUR": "mutation updateInteractiveTour( $interactiveTour: app_interactive_tour_set_input! $interactiveTourId: Int! ) { update_app_interactive_tour( where: { id: { _eq: $interactiveTourId } } _set: $interactiveTour ) { affected_rows } }",
  "DELETE_INTERACTIVE_TOUR": "mutation deleteInteractiveTour($interactiveTourId: Int!) { delete_app_interactive_tour(where: { id: { _eq: $interactiveTourId } }) { affected_rows } }",
  "GET_ITEMS_WITH_FILTERS": "query getItemsWithFilters( $where: app_item_meta_bool_exp! $orderBy: [app_item_meta_order_by!]! $offset: Int! $limit: Int! ) { app_item_meta(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { created_at depublish_at depublish_reason description duration expiry_date external_id uid is_deleted is_published issued lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name } publish_at published_at series title type { id label } updated_at note relations(where: { predicate: { _eq: \"IS_REPLACED_BY\" } }) { object } item_counts { bookmarks in_assignment in_collection plays views } } app_item_meta_aggregate(where: $where) { aggregate { count } } }",
  "GET_UNPUBLISHED_ITEMS_WITH_FILTERS": "query getUnpublishedItemsWithFilters( $where: shared_items_bool_exp! $orderBy: [shared_items_order_by!] $offset: Int! $limit: Int! ) { shared_items(where: $where, order_by: $orderBy, offset: $offset, limit: $limit) { id pid updated_at title status item_meta { id external_id uid is_published is_deleted } } shared_items_aggregate(where: $where) { aggregate { count } } }",
  "GET_ITEM_BY_UUID": "query getItemByUuid($uuid: uuid!) { app_item_meta(where: { uid: { _eq: $uuid } }) { thumbnail_path created_at depublish_at depublish_reason description duration expiry_date external_id uid is_deleted is_published issued lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name } publish_at published_at series title type { id label } updated_at note relations(where: { predicate: { _eq: \"IS_REPLACED_BY\" } }) { object } item_collaterals(where: { description: { _eq: \"subtitle\" } }) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
  "UPDATE_ITEM_PUBLISH_STATE": "mutation updateItemPublishedState($itemUuid: uuid!, $isPublished: Boolean!) { update_app_item_meta( where: { uid: { _eq: $itemUuid } } _set: { is_published: $isPublished } ) { affected_rows } }",
  "UPDATE_ITEM_DEPUBLISH_REASON": "mutation updateItemDepublishReason($itemUuid: uuid!, $reason: String) { update_app_item_meta( where: { uid: { _eq: $itemUuid } } _set: { depublish_reason: $reason } ) { affected_rows } }",
  "UPDATE_ITEM_NOTES": "mutation updateItemNotes($itemUuid: uuid!, $note: String) { update_app_item_meta(where: { uid: { _eq: $itemUuid } }, _set: { note: $note }) { affected_rows } }",
  "GET_PUBLIC_ITEMS": "query getItems($limit: Int!) { app_item_meta( order_by: { title: asc } limit: $limit where: { is_published: { _eq: true } } ) { external_id title is_published is_deleted } }",
  "FETCH_ITEM_UUID_BY_EXTERNAL_ID": "query fetchItemUuidByExternalId($externalId: bpchar!) { app_item_meta(where: { external_id: { _eq: $externalId } }) { uid is_published is_deleted } }",
  "GET_PUBLIC_ITEMS_BY_TITLE_OR_EXTERNAL_ID": "query getItemsByTitleOrExternalId($title: String!, $externalId: bpchar!, $limit: Int!) { itemsByTitle: app_item_meta( order_by: { title: asc } limit: $limit where: { title: { _ilike: $title }, is_published: { _eq: true } } ) { external_id title is_published is_deleted } itemsByExternalId: app_item_meta( order_by: { title: asc } limit: $limit where: { external_id: { _eq: $externalId }, is_published: { _eq: true } } ) { external_id title is_published is_deleted } }",
  "GET_ITEM_BY_EXTERNAL_ID": "query getItemByExternalId($externalId: bpchar!) { app_item_meta( where: { external_id: { _eq: $externalId } is_deleted: { _eq: false } is_published: { _eq: true } } ) { created_at depublish_at description duration expiry_date external_id id uid is_deleted is_orphaned is_published issued issued_edtf lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange org_id organisation { or_id name logo_url } publish_at published_at series thumbnail_path title type { id label } type_id updated_at note item_collaterals(where: { description: { _eq: \"subtitle\" } }) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_ITEM_DEPUBLISH_REASON": "query getDepublishReasonByExternalId($externalId: bpchar!) { app_item_meta( where: { external_id: { _eq: $externalId } is_deleted: { _eq: false } is_published: { _eq: false } } ) { depublish_reason is_published is_deleted } }",
  "GET_DISTINCT_SERIES": "query getDistinctSeries { app_item_meta(distinct_on: series, where: { series: { _is_null: false } }) { series is_published is_deleted } }",
  "DELETE_ITEM_FROM_COLLECTIONS_BOOKMARKS": "mutation deleteItemFromCollectionBookmarksAndAssignments( $itemExternalId: String! $itemUid: uuid! ) { delete_app_collection_fragments(where: { external_id: { _eq: $itemExternalId } }) { affected_rows } delete_app_item_bookmarks(where: { item_id: { _eq: $itemUid } }) { affected_rows } }",
  "REPLACE_ITEM_IN_COLLECTIONS_BOOKMARKS_AND_ASSIGNMENTS": "mutation replaceItemInCollectionsBookmarksAndAssignments( $oldItemUid: uuid! $oldItemExternalId: String! $newItemUid: uuid! $newItemExternalId: String! ) { update_app_collection_fragments( where: { external_id: { _eq: $oldItemExternalId } } _set: { external_id: $newItemExternalId, start_oc: null, end_oc: null } ) { affected_rows } update_app_item_bookmarks( where: { item_id: { _eq: $oldItemUid } } _set: { item_id: $newItemUid } ) { affected_rows } update_app_assignments( where: { content_id: { _eq: $oldItemExternalId }, content_label: { _eq: ITEM } } _set: { content_id: $newItemExternalId } ) { affected_rows } }",
  "UPDATE_SHARED_ITEMS_STATUS": "mutation setSharedItemsStatus($pids: [String!]!, $status: item_publishing_status) { update_shared_items(where: { pid: { _in: $pids } }, _set: { status: $status }) { affected_rows } }",
  "GET_UNPUBLISHED_ITEM_PIDS": "query getUnpublishedItemPids($where: shared_items_bool_exp!) { shared_items(where: $where) { pid } }",
  "GET_MENUS": "query getNavElements { app_content_nav_elements(distinct_on: placement, order_by: { placement: asc }) { id description placement tooltip } }",
  "GET_MENU_ITEMS_BY_PLACEMENT": "query getMenuItemsByPlacement($placement: String!) { app_content_nav_elements( order_by: { position: asc } where: { placement: { _eq: $placement } } ) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "GET_MENU_ITEM_BY_ID": "query getMenuItemById($id: Int!) { app_content_nav_elements(where: { id: { _eq: $id } }) { id created_at description user_group_ids icon_name label link_target placement position updated_at content_type content_path tooltip } }",
  "UPDATE_MENU_ITEM_BY_ID": "mutation updateMenuItemById($id: Int!, $menuItem: app_content_nav_elements_set_input!) { update_app_content_nav_elements(where: { id: { _eq: $id } }, _set: $menuItem) { affected_rows } }",
  "INSERT_MENU_ITEM": "mutation insertMenuItem($menuItem: app_content_nav_elements_insert_input!) { insert_app_content_nav_elements(objects: [$menuItem]) { returning { id } } }",
  "DELETE_MENU_ITEM": "mutation deleteMenuItemById($id: Int!) { delete_app_content_nav_elements(where: { id: { _eq: $id } }) { affected_rows } }",
  "GET_PERMISSION_GROUPS": "query getAllPermissionGroups( $where: users_permission_groups_bool_exp! $offset: Int! $limit: Int! $orderBy: [users_permission_groups_order_by!]! ) { users_permission_groups(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { label description created_at updated_at id } users_permission_groups_aggregate(where: $where) { aggregate { count } } }",
  "DELETE_PERMISSION_GROUP": "mutation deletePermissionGroupById($id: Int!) { delete_users_permission_groups(where: { id: { _eq: $id } }) { affected_rows } }",
  "GET_PERMISSION_GROUP_BY_ID": "query getPermissionGroupById($id: Int!) { users_permission_groups(where: { id: { _eq: $id } }) { label id description created_at updated_at permission_group_user_permissions(order_by: { permission: { description: asc } }) { permissions { id label description } } } }",
  "GET_ALL_PERMISSIONS": "query getAllPermissions { users_permissions(order_by: { description: asc }) { id label description } }",
  "ADD_PERMISSIONS_TO_GROUP": "mutation insertPermissionInPermissionGroup( $objs: [users_permission_group_user_permissions_insert_input!]! ) { insert_users_permission_group_user_permissions(objects: $objs) { affected_rows } }",
  "REMOVE_PERMISSIONS_FROM_GROUP": "mutation removePermissionInPermissionGroup($permissionGroupId: Int!, $permissionIds: [Int!]!) { delete_users_permission_group_user_permissions( where: { user_permission_group_id: { _eq: $permissionGroupId } user_permission_id: { _in: $permissionIds } } ) { affected_rows } }",
  "INSERT_PERMISSIONS_GROUP": "mutation insertPermissionGroup($permissionGroup: users_permission_groups_insert_input!) { insert_users_permission_groups(objects: [$permissionGroup]) { returning { id } } }",
  "UPDATE_PERMISSIONS_GROUP": "mutation updatePermissionGroup( $permissionGroup: users_permission_groups_set_input! $permissionGroupId: Int! ) { update_users_permission_groups( where: { id: { _eq: $permissionGroupId } } _set: $permissionGroup ) { affected_rows } }",
  "GET_TRANSLATIONS": "query getTranslations { app_site_variables(where: { name: { _ilike: \"translations-%\" } }) { name value } }",
  "UPDATE_TRANSLATIONS": "mutation updateTranslations($name: String!, $translations: app_site_variables_set_input!) { update_app_site_variables(where: { name: { _eq: $name } }, _set: $translations) { affected_rows } }",
  "GET_USER_GROUP_BY_ID": "query getUserGroupById($id: Int!) { users_groups(where: { id: { _eq: $id } }) { label id description created_at updated_at group_user_permission_groups(order_by: { permission_group: { label: asc } }) { permission_group { label id created_at description updated_at permission_group_user_permissions( order_by: { permission: { description: asc } } ) { permission { label description id } } } } } }",
  "GET_USER_GROUPS_WITH_FILTERS": "query getUserGroups( $limit: Int! $offset: Int! $orderBy: [users_groups_order_by!]! $where: users_groups_bool_exp! ) { users_groups(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) { label id created_at description updated_at } users_groups_aggregate(where: $where) { aggregate { count } } }",
  "GET_ALL_PERMISSION_GROUPS": "query getAllPermissionGroups { users_permission_groups { id label description created_at updated_at } }",
  "ADD_PERMISSION_GROUPS_TO_USER_GROUP": "mutation linkPermissionGroupToUserGroup( $objs: [users_group_user_permission_groups_insert_input!]! ) { insert_users_group_user_permission_groups(objects: $objs) { affected_rows } }",
  "REMOVE_PERMISSION_GROUPS_FROM_USER_GROUP": "mutation unlinkPermissionGroupFromUserGroup($userGroupId: Int!, $permissionGroupIds: [Int!]!) { delete_users_group_user_permission_groups( where: { user_group_id: { _eq: $userGroupId } user_permission_group_id: { _in: $permissionGroupIds } } ) { affected_rows } }",
  "INSERT_USER_GROUP": "mutation insertUserGroup($userGroup: users_groups_insert_input!) { insert_users_groups(objects: [$userGroup]) { returning { id } } }",
  "UPDATE_USER_GROUP": "mutation updateUserGroup($userGroup: users_groups_set_input!, $userGroupId: Int!) { update_users_groups(where: { id: { _eq: $userGroupId } }, _set: $userGroup) { affected_rows } }",
  "DELETE_USER_GROUP": "mutation deleteUserGroup($userGroupId: Int!) { delete_users_groups(where: { id: { _eq: $userGroupId } }) { affected_rows } }",
  "GET_USER_BY_ID": "query getUserById($id: uuid!) { users_profiles( offset: 0 limit: 1 where: { id: { _eq: $id }, is_deleted: { _eq: false } } ) { id user: usersByuserId { uid id first_name last_name last_access_at mail is_blocked idpmaps { id idp idp_user_id } } avatar alias title business_category stamboek updated_at created_at bio alternative_email company_id organisation { logo_url name or_id } is_exception title profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } profile_user_group { group { id label group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label id } } id label } } } } } }",
  "GET_USERS": "query getUsers( $offset: Int! $limit: Int! $orderBy: [users_summary_view_order_by!]! $where: users_summary_view_bool_exp! ) { users_summary_view(offset: $offset, limit: $limit, order_by: $orderBy, where: $where) { user_id full_name first_name last_name mail last_access_at is_blocked profile_id stamboek acc_created_at group_id group_name company_name is_exception business_category idps { idp } classifications { key } contexts { key } organisations { organization_id unit_id } } users_summary_view_aggregate(where: $where) { aggregate { count } } }",
  "GET_PROFILE_IDS": "query getProfileIds($where: shared_users_bool_exp!) { shared_users(where: $where) { profile { id } } }",
  "GET_PROFILE_NAMES": "query getProfileNames($profileIds: [uuid!]!) { users_profiles(where: { id: { _in: $profileIds }, is_deleted: { _eq: false } }) { id user: usersByuserId { id full_name mail } } }",
  "BULK_ADD_SUBJECTS_TO_PROFILES": "mutation bulkAddSubjectsToProfiles($subjects: [users_profile_classifications_insert_input!]!) { insert_users_profile_classifications(objects: $subjects) { affected_rows } }",
  "BULK_DELETE_SUBJECTS_FROM_PROFILES": "mutation bulkDeleteSubjectsFromProfiles($subjects: [String!]!, $profileIds: [uuid!]!) { delete_users_profile_classifications( where: { key: { _in: $subjects }, profile_id: { _in: $profileIds } } ) { affected_rows } }",
  "GET_DISTINCT_BUSINESS_CATEGORIES": "query getDistinctBusinessCategories { users_profiles( distinct_on: business_category where: { business_category: { _is_null: false }, is_deleted: { _eq: false } } ) { business_category } }",
  "GET_IDPS": "query getIdps { users_idps { value } }",
  "GET_CONTENT_COUNTS_FOR_USERS": "query getContentCountsForUsers($profileIds: [uuid!]!) { publicCollections: app_collections_aggregate( where: { profile: { id: { _in: $profileIds } } is_public: { _eq: true } is_deleted: { _eq: false } } ) { aggregate { count } } publicContentPages: app_content_aggregate( where: { user_profile_id: { _in: $profileIds } is_public: { _eq: true } is_deleted: { _eq: false } } ) { aggregate { count } } privateCollections: app_collections_aggregate( where: { profile: { id: { _in: $profileIds } } is_public: { _eq: false } is_deleted: { _eq: false } } ) { aggregate { count } } assignments: app_assignments_aggregate( where: { owner_profile_id: { _in: $profileIds }, is_deleted: { _eq: false } } ) { aggregate { count } } collectionBookmarks: app_collection_bookmarks_aggregate( where: { profile_id: { _in: $profileIds } } ) { aggregate { count } } itemBookmarks: app_item_bookmarks_aggregate(where: { profile_id: { _in: $profileIds } }) { aggregate { count } } privateContentPages: app_content_aggregate( where: { user_profile_id: { _in: $profileIds } is_public: { _eq: false } is_deleted: { _eq: false } } ) { aggregate { count } } }",
  "GET_ASSIGNMENT_BY_UUID": "query getAssignmentsById($uuid: uuid!) { app_assignments(where: { uuid: { _eq: $uuid } }) { answer_url tags { assignment_tag { color_enum_value color_override enum_color { label value } id label } } responses { id } assignment_type available_at class_room content_id content_label content_layout created_at deadline_at description uuid id is_archived is_collaborative is_deleted title updated_at owner_profile_id } }",
  "GET_ASSIGNMENT_BY_CONTENT_ID_AND_TYPE": "query getAssignmentsByContentIdAndType( $contentId: String! $contentType: lookup_enum_assignment_content_labels_enum! ) { app_assignments( where: { content_id: { _eq: $contentId } content_label: { _eq: $contentType } is_deleted: { _eq: false } } ) { uuid title profile { user: usersByuserId { id first_name last_name } } is_archived } }",
  "GET_ASSIGNMENTS_BY_OWNER_ID": "query getAssignmentsByOwner( $owner_profile_id: uuid $offset: Int = 0 $limit: Int $order: app_assignments_order_by! = { deadline_at: desc } $filter: [app_assignments_bool_exp] ) { app_assignments( where: { owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } _and: $filter } offset: $offset limit: $limit order_by: [$order] ) { tags(order_by: { assignment_tag: { label: asc } }) { assignment_tag { color_enum_value color_override enum_color { label value } id label } } responses { id } assignment_type class_room deadline_at uuid is_archived is_deleted title owner_profile_id created_at } count: app_assignments_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } _or: $filter } ) { aggregate { count } } }",
  "GET_ASSIGNMENTS_BY_RESPONSE_OWNER_ID": "query getAssignmentsByResponseOwnerId( $owner_profile_id: String! $offset: Int = 0 $limit: Int $filter: [app_assignments_bool_exp] $order: app_assignments_order_by! ) { app_assignments( where: { responses: { owner_profile_ids: { _has_key: $owner_profile_id } } is_deleted: { _eq: false } _and: $filter } limit: $limit offset: $offset order_by: [$order] ) { tags { assignment_tag { color_enum_value color_override enum_color { label value } id label } } responses { id submitted_at } assignment_type class_room deadline_at uuid is_archived is_deleted title created_at owner_profile_id profile { user: usersByuserId { first_name last_name id } avatar organisation { logo_url name or_id } id } } count: app_assignments_aggregate( where: { responses: { owner_profile_ids: { _has_key: $owner_profile_id } } is_deleted: { _eq: false } _or: $filter } ) { aggregate { count } } }",
  "GET_ASSIGNMENT_RESPONSES": "query getAssignmentResponses($profileId: String!, $assignmentUuid: uuid!) { app_assignment_responses( where: { owner_profile_ids: { _has_key: $profileId } assignment_uuid: { _eq: $assignmentUuid } } ) { id } }",
  "GET_ASSIGNMENT_WITH_RESPONSE": "query getAssignmentWithResponse($assignmentUuid: uuid!, $pupilUuid: String!) { assignments: app_assignments( where: { uuid: { _eq: $assignmentUuid } is_deleted: { _eq: false } is_archived: { _eq: false } } order_by: [{ deadline_at: desc }] ) { tags { id assignment_tag { color_enum_value color_override enum_color { label value } id label } } responses(where: { owner_profile_ids: { _has_key: $pupilUuid } }) { id created_at submitted_at owner_profile_ids assignment_uuid collection_uuid } assignment_type class_room deadline_at uuid is_archived is_deleted title description content_id content_label content_layout created_at updated_at answer_url owner_profile_id profile { id organisation { logo_url name or_id } profile_user_group { group { label id } } user: usersByuserId { id first_name last_name } } } }",
  "INSERT_ASSIGNMENT": "mutation insertAssignment($assignment: app_assignments_insert_input!) { insert_app_assignments(objects: [$assignment]) { affected_rows returning { uuid id } } }",
  "UPDATE_ASSIGNMENT": "mutation updateAssignmentById($assignmentUuid: uuid!, $assignment: app_assignments_set_input!) { update_app_assignments(where: { uuid: { _eq: $assignmentUuid } }, _set: $assignment) { affected_rows } }",
  "UPDATE_ASSIGNMENT_ARCHIVE_STATUS": "mutation toggleAssignmentArchiveStatus($assignmentUuid: uuid!, $archived: Boolean!) { update_app_assignments( where: { uuid: { _eq: $assignmentUuid } } _set: { is_archived: $archived } ) { affected_rows } }",
  "UPDATE_ASSIGNMENT_RESPONSE_SUBMITTED_STATUS": "mutation toggleAssignmentResponseSubmitStatus($id: Int!, $submittedAt: timestamptz) { update_app_assignment_responses( where: { id: { _eq: $id } } _set: { submitted_at: $submittedAt } ) { affected_rows } }",
  "DELETE_ASSIGNMENT": "mutation deleteAssignmentById($assignmentUuid: uuid!) { delete_app_assignments(where: { uuid: { _eq: $assignmentUuid } }) { affected_rows } }",
  "INSERT_ASSIGNMENT_RESPONSE": "mutation insertAssignmentResponse( $assignmentResponses: [app_assignment_responses_insert_input!]! ) { insert_app_assignment_responses(objects: $assignmentResponses) { affected_rows returning { id created_at submitted_at owner_profile_ids assignment_uuid collection_uuid } } }",
  "GET_ASSIGNMENT_UUID_FROM_LEGACY_ID": "query getAssignmentUuidFromLegacyId($legacyId: Int!) { app_assignments(where: { id: { _eq: $legacyId } }, limit: 1) { uuid } }",
  "UPDATE_COLLECTION": "mutation updateCollectionById($id: uuid!, $collection: app_collections_set_input!) { update_app_collections( where: { id: { _eq: $id }, is_deleted: { _eq: false } } _set: $collection ) { affected_rows } }",
  "INSERT_COLLECTION": "mutation insertCollection($collection: app_collections_insert_input!) { insert_app_collections(objects: [$collection]) { affected_rows returning { id title collection_fragments(order_by: { position: asc }) { id } } } }",
  "SOFT_DELETE_COLLECTION": "mutation softDeleteCollectionById($id: uuid!) { update_app_collections(where: { id: { _eq: $id } }, _set: { is_deleted: true }) { affected_rows } }",
  "UPDATE_COLLECTION_FRAGMENT": "mutation updateCollectionFragmentById( $id: Int! $fragment: app_collection_fragments_set_input! ) { update_app_collection_fragments(where: { id: { _eq: $id } }, _set: $fragment) { affected_rows } }",
  "DELETE_COLLECTION_FRAGMENT": "mutation deleteCollectionFragmentById($id: Int!) { delete_app_collection_fragments(where: { id: { _eq: $id } }) { affected_rows } }",
  "INSERT_COLLECTION_FRAGMENTS": "mutation insertCollectionFragment( $id: Int! $fragments: [app_collection_fragments_insert_input!]! ) { insert_app_collection_fragments(objects: $fragments) { affected_rows returning { id } } }",
  "GET_COLLECTIONS_BY_OWNER": "query getCollectionsByOwner( $owner_profile_id: uuid $type_id: Int $offset: Int = 0 $limit: Int $order: [app_collections_order_by!] = { updated_at: desc } ) { app_collections( where: { type_id: { _eq: $type_id } owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } } offset: $offset limit: $limit order_by: $order ) { id updated_at type_id type { label id } title publish_at owner_profile_id profile { id alias title alternative_email avatar organisation { logo_url name or_id } created_at stamboek updated_at user_id user: usersByuserId { id first_name last_name profile { profile_user_group { group { label id } } } } } is_public external_id depublish_at created_at thumbnail_path view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_PUBLIC_COLLECTIONS": "query getPublicCollections($limit: Int!, $typeId: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId } is_public: { _eq: true } is_deleted: { _eq: false } } limit: $limit ) { id title } }",
  "GET_PUBLIC_COLLECTIONS_BY_ID": "query getPublicCollectionsById($id: uuid!, $typeId: Int!, $limit: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId } id: { _eq: $id } is_public: { _eq: true } is_deleted: { _eq: false } } limit: $limit ) { id title } }",
  "GET_PUBLIC_COLLECTIONS_BY_TITLE": "query getPublicCollectionsByTitle($title: String!, $typeId: Int!, $limit: Int!) { app_collections( order_by: { title: asc } where: { type_id: { _eq: $typeId } title: { _ilike: $title } is_public: { _eq: true } is_deleted: { _eq: false } } limit: $limit ) { id title } }",
  "GET_COLLECTION_TITLES_BY_OWNER": "query getCollectionNamesByOwner($owner_profile_id: uuid) { app_collections( where: { type_id: { _eq: 3 } owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } } order_by: { updated_at: desc } ) { id title } }",
  "GET_BUNDLE_TITLES_BY_OWNER": "query getCollectionNamesByOwner($owner_profile_id: uuid) { app_collections( where: { type_id: { _eq: 4 } owner_profile_id: { _eq: $owner_profile_id } is_deleted: { _eq: false } } order_by: { updated_at: desc } ) { id title } }",
  "GET_BUNDLES_CONTAINING_COLLECTION": "query getPublishedBundlesContainingCollection($id: String!) { app_collections( where: { is_public: { _eq: true } collection_fragments: { external_id: { _eq: $id } } is_deleted: { _eq: false } } ) { id title } }",
  "INSERT_COLLECTION_LABELS": "mutation insertCollectionLabels($objects: [app_collection_labels_insert_input!]!) { insert_app_collection_labels(objects: $objects) { affected_rows } }",
  "DELETE_COLLECTION_LABELS": "mutation deleteCollectionLabels($labels: [String!]!, $collectionId: uuid!) { delete_app_collection_labels( where: { label: { _in: $labels }, collection_uuid: { _eq: $collectionId } } ) { affected_rows } }",
  "GET_QUALITY_LABELS": "query getQualityLabels { lookup_enum_collection_labels { description value } }",
  "GET_COLLECTION_BY_TITLE_OR_DESCRIPTION": "query getCollectionByTitleOrDescription( $title: String! $description: String! $collectionId: uuid! $typeId: Int ) { collectionByTitle: app_collections( where: { title: { _eq: $title } is_deleted: { _eq: false } is_public: { _eq: true } id: { _neq: $collectionId } type_id: { _eq: $typeId } } limit: 1 ) { id } collectionByDescription: app_collections( where: { description: { _eq: $description } is_deleted: { _eq: false } is_public: { _eq: true } id: { _neq: $collectionId } type_id: { _eq: $typeId } } limit: 1 ) { id } }",
  "GET_COLLECTIONS_BY_FRAGMENT_ID": "query getCollectionsByItemUuid($fragmentId: String!) { app_collections( where: { collection_fragments: { external_id: { _eq: $fragmentId } } is_deleted: { _eq: false } } ) { id title is_public profile { user: usersByuserId { first_name last_name id } id organisation { name } } } }",
  "INSERT_COLLECTION_MANAGEMENT_ENTRY": "mutation insertCollectionManagementEntry( $collection_id: uuid! $current_status: String $manager_profile_id: uuid $status_valid_until: timestamptz ) { insert_app_collection_management( objects: [ { collection_id: $collection_id current_status: $current_status manager_profile_id: $manager_profile_id status_valid_until: $status_valid_until } ] ) { affected_rows } }",
  "UPDATE_COLLECTION_MANAGEMENT_ENTRY": "mutation updateCollectionManagementEntry( $collection_id: uuid! $current_status: String $manager_profile_id: uuid $status_valid_until: timestamptz ) { update_app_collection_management( where: { collection_id: { _eq: $collection_id } } _set: { current_status: $current_status manager_profile_id: $manager_profile_id status_valid_until: $status_valid_until } ) { affected_rows } }",
  "INSERT_COLLECTION_MANAGEMENT_QC_ENTRY": "mutation insertCollectionManagementEntry( $collection_id: uuid! $comment: String $assignee_profile_id: uuid $qc_label: lookup_enum_collection_management_qc_label_enum $qc_status: Boolean ) { insert_app_collection_management_QC_one( object: { comment: $comment assignee_profile_id: $assignee_profile_id qc_label: $qc_label qc_status: $qc_status collection_id: $collection_id } ) { id } }",
  "GET_EDUCATION_LEVELS": "query getEducationLevels { lookup_enum_lom_context { description } }",
  "GET_SUBJECTS": "query getSubjects { lookup_enum_lom_classification { description } }",
  "GET_ASSIGNMENT_LABELS_BY_PROFILE_ID": "query getAssignmentLabels($profileId: uuid!) { app_assignment_labels( where: { owner_profile_id: { _eq: $profileId } } order_by: { label: asc } ) { color_enum_value color_override label id enum_color { label value } } }",
  "INSERT_ASSIGNMENT_LABELS": "mutation insertAssignmentLabels($objects: [app_assignment_labels_insert_input!]!) { insert_app_assignment_labels(objects: $objects) { returning { id } } }",
  "UPDATE_ASSIGNMENT_LABEL": "mutation updateAssignmentLabels( $label: String! $colorEnumValue: lookup_enum_colors_enum! $profileId: uuid! $labelId: Int! ) { update_app_assignment_labels( _set: { label: $label, color_enum_value: $colorEnumValue } where: { owner_profile_id: { _eq: $profileId }, id: { _eq: $labelId } } ) { affected_rows } }",
  "DELETE_ASSIGNMENT_LABELS": "mutation deleteAssignmentLabel($profileId: uuid!, $labelIds: [Int!]!) { delete_app_assignment_labels( where: { owner_profile_id: { _eq: $profileId }, id: { _in: $labelIds } } ) { affected_rows } delete_app_assignment_assignment_tags(where: { assignment_tag_id: { _in: $labelIds } }) { affected_rows } }",
  "LINK_ASSIGNMENT_LABELS_FROM_ASSIGNMENT": "mutation linkAssignmentLabelsToAssignment( $objects: [app_assignment_assignment_tags_insert_input!]! ) { insert_app_assignment_assignment_tags(objects: $objects) { affected_rows } }",
  "UNLINK_ASSIGNMENT_LABELS_FROM_ASSIGNMENT": "mutation unlinkAssignmentLabelsFromAssignment($assignmentUuid: uuid!, $labelIds: [Int!]!) { delete_app_assignment_assignment_tags( where: { assignment_uuid: { _eq: $assignmentUuid } assignment_tag_id: { _in: $labelIds } } ) { affected_rows } }",
  "GET_ALL_ASSIGNMENT_LABEL_COLORS": "query getAllAssignmentLabelColors { lookup_enum_colors { label value } }",
  "INSERT_ITEM_BOOKMARK": "mutation insertItemBookmark($bookmarkItem: app_item_bookmarks_insert_input!) { insert_app_item_bookmarks(objects: [$bookmarkItem]) { affected_rows } }",
  "INSERT_COLLECTION_BOOKMARK": "mutation insertCollectionBookmark($bookmarkItem: app_collection_bookmarks_insert_input!) { insert_app_collection_bookmarks(objects: [$bookmarkItem]) { affected_rows } }",
  "REMOVE_ITEM_BOOKMARK": "mutation deleteItemBookmark($itemUuid: uuid!, $profileId: uuid) { delete_app_item_bookmarks( where: { item_id: { _eq: $itemUuid }, profile_id: { _eq: $profileId } } ) { affected_rows } }",
  "REMOVE_COLLECTION_BOOKMARK": "mutation deleteCollectionBookmark($collectionUuid: uuid!, $profileId: uuid) { delete_app_collection_bookmarks( where: { collection_uuid: { _eq: $collectionUuid }, profile_id: { _eq: $profileId } } ) { affected_rows } }",
  "INCREMENT_ITEM_VIEWS": "mutation increaseItemViews($itemUuid: uuid!) { update_app_item_views(where: { item_id: { _eq: $itemUuid } }, _inc: { count: 1 }) { affected_rows } }",
  "INCREMENT_COLLECTION_VIEWS": "mutation increaseCollectionViews($collectionUuid: uuid!) { update_app_collection_views( where: { collection_uuid: { _eq: $collectionUuid } } _inc: { count: 1 } ) { affected_rows } }",
  "INIT_ITEM_VIEWS": "mutation insertInitialItemViewCount($itemUuid: uuid!) { insert_app_item_views(objects: [{ count: 1, item_id: $itemUuid }]) { affected_rows } }",
  "INIT_COLLECTION_VIEWS": "mutation insertInitialCollectionViewCount($collectionUuid: uuid!) { insert_app_collection_views(objects: [{ count: 1, collection_uuid: $collectionUuid }]) { affected_rows } }",
  "INCREMENT_ITEM_PLAYS": "mutation increaseItemPlays($itemUuid: uuid!) { update_app_item_plays(where: { item_id: { _eq: $itemUuid } }, _inc: { count: 1 }) { affected_rows } }",
  "INCREMENT_COLLECTION_PLAYS": "mutation increaseCollectionPlays($collectionUuid: uuid!) { update_app_collection_plays( where: { collection_uuid: { _eq: $collectionUuid } } _inc: { count: 1 } ) { affected_rows } }",
  "GET_ITEM_VIEWS": "query getItemViewCount($itemUuid: uuid!) { app_item_meta(where: { uid: { _eq: $itemUuid } }) { view_counts { count } is_deleted is_published } }",
  "GET_COLLECTION_VIEWS": "query getCollectionViewCount($collectionUuid: uuid!) { app_collections(where: { id: { _eq: $collectionUuid } }) { view_counts { count } } }",
  "GET_ITEM_PLAYS": "query getItemPlayCount($itemUuid: uuid!) { app_item_meta(where: { uid: { _eq: $itemUuid } }) { play_counts { count } is_published is_deleted } }",
  "GET_COLLECTION_PLAYS": "query getCollectionPlayCount($collectionUuid: uuid!) { app_collections(where: { uid: { _eq: $collectionUuid } }) { play_counts { count } } }",
  "INIT_ITEM_PLAYS": "mutation insertInitialItemPlayCount($itemUuid: uuid!) { insert_app_item_plays(objects: [{ count: 1, item_id: $itemUuid }]) { affected_rows } }",
  "INIT_COLLECTION_PLAYS": "mutation insertInitialCollectionPlayCount($collectionUuid: uuid!) { insert_app_collection_plays(objects: [{ count: 1, collection_uuid: $collectionUuid }]) { affected_rows } }",
  "GET_ITEM_BOOKMARK_VIEW_PLAY_COUNTS": "query getItemBookmarkViewPlayCounts($itemUuid: uuid!, $profileId: uuid) { app_item_plays(where: { item_id: { _eq: $itemUuid } }, limit: 1) { count } app_item_views(where: { item_id: { _eq: $itemUuid } }, limit: 1) { count } app_item_bookmarks_aggregate(where: { item_id: { _eq: $itemUuid } }) { aggregate { count } } app_item_bookmarks( where: { profile_id: { _eq: $profileId }, item_id: { _eq: $itemUuid } } limit: 1 ) { id } }",
  "GET_COLLECTION_BOOKMARK_VIEW_PLAY_COUNTS": "query getCollectionBookmarkViewPlayCounts($collectionUuid: uuid!, $profileId: uuid) { app_collection_views(where: { collection_uuid: { _eq: $collectionUuid } }, limit: 1) { count } app_collection_plays(where: { collection_uuid: { _eq: $collectionUuid } }, limit: 1) { count } app_collection_bookmarks_aggregate(where: { collection_uuid: { _eq: $collectionUuid } }) { aggregate { count } } app_collection_bookmarks( where: { profile_id: { _eq: $profileId }, collection_uuid: { _eq: $collectionUuid } } limit: 1 ) { id } }",
  "GET_MULTIPLE_ITEM_VIEW_COUNTS": "query getMultipleItemViewCounts($uuids: [uuid!]) { items: app_item_views(where: { item_id: { _in: $uuids } }) { count id: item_id } }",
  "GET_MULTIPLE_COLLECTION_VIEW_COUNTS": "query getMultipleCollectionViewCounts($uuids: [uuid!]) { items: app_collection_views(where: { collection_uuid: { _in: $uuids } }) { count id: collection_uuid } }",
  "GET_BOOKMARKS_FOR_USER": "query getBookmarksForUser($profileId: uuid!) { app_item_bookmarks(where: { profile_id: { _eq: $profileId } }) { bookmarkedItem { title thumbnail_path issued item { external_id item_meta { is_deleted is_published type { label } } } view_counts { count } } item_id created_at } app_collection_bookmarks(where: { profile_id: { _eq: $profileId } }) { bookmarkedCollection { title thumbnail_path created_at type_id view_counts { count } } collection_uuid created_at } }",
  "GET_BOOKMARK_STATUSES": "query getBookmarkStatuses($profileId: uuid!, $itemUuids: [uuid!]!, $collectionUuids: [uuid!]!) { app_collection_bookmarks( where: { profile_id: { _eq: $profileId }, collection_uuid: { _in: $collectionUuids } } ) { collection_uuid } app_item_bookmarks( where: { profile_id: { _eq: $profileId }, item_id: { _in: $itemUuids } } ) { item_id } }",
  "GET_NOTIFICATION": "query getNotification($key: String!, $profileId: uuid!) { users_notifications(where: { profile_id: { _eq: $profileId }, key: { _eq: $key } }) { through_email through_platform } }",
  "INSERT_NOTIFICATION": "mutation insertNotification( $key: String! $profileId: uuid! $throughEmail: Boolean! $throughPlatform: Boolean! ) { insert_users_notifications( objects: { key: $key profile_id: $profileId through_email: $throughEmail through_platform: $throughPlatform } ) { affected_rows } }",
  "UPDATE_NOTIFICATION": "mutation updateNotification( $key: String! $profileId: uuid! $throughEmail: Boolean! $throughPlatform: Boolean! ) { update_users_notifications( where: { profile_id: { _eq: $profileId }, key: { _eq: $key } } _set: { through_email: $throughEmail, through_platform: $throughPlatform } ) { affected_rows } }",
  "GET_ALL_ORGANISATIONS": "query getAllOrganisations { shared_organisations(order_by: { name: asc }) { or_id name logo_url } }",
  "GET_DISTINCT_ORGANISATIONS": "query getDistinctOrganisations { app_item_meta(distinct_on: org_id, where: { org_id: { _is_null: false } }) { organisation { or_id name logo_url } is_published is_deleted } }",
  "GET_USERS_IN_COMPANY": "query getUsersByCompanyId($companyId: String!) { users_profiles( order_by: { usersByuserId: { first_name: asc } } where: { company_id: { _eq: $companyId }, is_deleted: { _eq: false } } ) { id user: usersByuserId { uid full_name mail is_blocked last_access_at } profile_user_group { group { id label } } } }",
  "FETCH_COLLECTION_RELATIONS_BY_OBJECTS": "query getCollectionRelationsByObject( $objectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_collection_relations( where: { object: { _in: $objectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
  "FETCH_ITEM_RELATIONS_BY_OBJECTS": "query getItemRelationsByObject( $objectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_item_relations( where: { object: { _in: $objectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
  "FETCH_COLLECTION_RELATIONS_BY_SUBJECTS": "query getCollectionRelationsBySubject( $subjectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_collection_relations( where: { subject: { _in: $subjectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
  "FETCH_ITEM_RELATIONS_BY_SUBJECTS": "query getItemRelationsBySubject( $subjectIds: [uuid!]! $relationType: lookup_enum_relation_types_enum! ) { app_item_relations( where: { subject: { _in: $subjectIds }, predicate: { _eq: $relationType } } ) { id object subject predicate } }",
  "INSERT_COLLECTION_RELATION": "mutation insertCollectionRelation( $objectId: uuid! $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { insert_app_collection_relations( objects: [{ object: $objectId, subject: $subjectId, predicate: $relationType }] ) { returning { id } } }",
  "INSERT_ITEM_RELATION": "mutation insertItemRelation( $objectId: uuid! $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { insert_app_item_relations( objects: [{ object: $objectId, subject: $subjectId, predicate: $relationType }] ) { returning { id } } }",
  "DELETE_COLLECTION_RELATIONS_BY_OBJECT": "mutation deleteItemRelationsByObject( $objectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_collection_relations( where: { object: { _eq: $objectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
  "DELETE_ITEM_RELATIONS_BY_OBJECT": "mutation deleteItemRelationsByObject( $objectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_item_relations( where: { object: { _eq: $objectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
  "DELETE_COLLECTION_RELATIONS_BY_SUBJECT": "mutation deleteItemRelationsBySubject( $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_collection_relations( where: { subject: { _eq: $subjectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
  "DELETE_ITEM_RELATIONS_BY_SUBJECT": "mutation deleteItemRelationsBySubject( $subjectId: uuid! $relationType: lookup_enum_relation_types_enum! ) { delete_app_item_relations( where: { subject: { _eq: $subjectId }, predicate: { _eq: $relationType } } ) { affected_rows } }",
  "GET_WORKSPACE_TAB_COUNTS": "query getWorkspaceTabCounts($owner_profile_id: uuid) { collection_counts: app_collections_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id } type_id: { _eq: 3 } is_deleted: { _eq: false } } ) { aggregate { count } } bundle_counts: app_collections_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id } type_id: { _eq: 4 } is_deleted: { _eq: false } } ) { aggregate { count } } assignment_counts: app_assignments_aggregate( where: { owner_profile_id: { _eq: $owner_profile_id } is_archived: { _eq: false } is_deleted: { _eq: false } } ) { aggregate { count } } collection_bookmark_counts: app_collection_bookmarks_aggregate( where: { profile_id: { _eq: $owner_profile_id } } ) { aggregate { count } } item_bookmark_counts: app_item_bookmarks_aggregate( where: { profile_id: { _eq: $owner_profile_id } } ) { aggregate { count } } }",
  "GET_CONTENT_ASSET": "query getContentAssetOwnerId($url: String!) { app_content_assets(where: {path: {_eq: $url}}) { owner_id content_asset_type_id } }",
  "INSERT_CONTENT_ASSET": "mutation insertContentAsset($asset: app_content_assets_insert_input!) { insert_app_content_assets(objects: [$asset]) { affected_rows } }",
  "DELETE_CONTENT_ASSET": "mutation deleteContentAsset($url: String!) { delete_app_content_assets(where: {path: {_eq: $url}}) { affected_rows } }",
  "GET_USER_INFO_BY_USER_EMAIL": "query getUserInfoByMail($email: String!) { users: shared_users(limit: 1, where: {mail: {_eq: $email}, profile: { is_deleted: { _eq: false } }}) { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } }",
  "GET_USER_INFO_BY_ID": "query getUserInfoById($userId: uuid!) { users: shared_users(limit: 1, where: {uid: {_eq: $userId}, profile: { is_deleted: { _eq: false } }}) { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } }",
  "GET_USER_BY_LDAP_UUID": "query getUserByLdapUuid($ldapUuid: String!) { users_idp_map(where: {idp: {_eq: HETARCHIEF}, idp_user_id: {_eq: $ldapUuid}}, limit: 1) { local_user { first_name last_name is_blocked profile { id alias title alternative_email avatar created_at stamboek bio updated_at user_id is_exception company_id organisation { logo_url name or_id } profile_user_group { group { id group_user_permission_groups { permission_group { permission_group_user_permissions { permission { label } } } } } } profile_classifications { key } profile_contexts { key } profile_organizations { unit_id organization_id } } created_at expires_at last_access_at external_uid role { label name } uid updated_at mail idpmaps { idp idp_user_id } } } }",
  "INSERT_USER": "mutation insertUser($user: shared_users_insert_input!) { insert_shared_users(objects: [$user]) { returning { uid } } }",
  "INSERT_PROFILE": "mutation insertProfile($profile: users_profiles_insert_input!) { insert_users_profiles(objects: [$profile]) { returning { id } } }",
  "GET_IDP_MAP": "query insertIdp($idpType: users_idps_enum!, $idpUserId: String!, $localUserId: uuid!) { users_idp_map(where: {idp_user_id: {_eq: $idpUserId}, local_user_id: {_eq: $localUserId}, idp: {_eq: $idpType}}) { id } }",
  "INSERT_IDP_MAP": "mutation insertIdp($idpMap: users_idp_map_insert_input!) { insert_users_idp_map(objects: [$idpMap]) { affected_rows } }",
  "DELETE_IDP_MAPS": "mutation deleteIdp($idpType: users_idps_enum!, $avoUserId: uuid!) { delete_users_idp_map(where: {idp: {_eq: $idpType}, local_user_id: {_eq: $avoUserId}}) { affected_rows } }",
  "GET_USER_BY_IDP_ID": "query getUserByIdpId($idpType: users_idps_enum!, $idpId: String!) { shared_users(where: {idpmaps: {idp: {_eq: $idpType}, idp_user_id: {_eq: $idpId}}, profile: { is_deleted: { _eq: false } }}) { uid } }",
  "GET_PROFILE_IDS_BY_USER_UID": "query getProfileIdsByUserUid($userUid: uuid!) { users_profiles(where: {user_id: {_eq: $userUid}, is_deleted: { _eq: false }}) { id } }",
  "LINK_USER_GROUPS_TO_PROFILE": "mutation linkUserGroupToProfile($objects: [users_profile_user_groups_insert_input!]!) { insert_users_profile_user_groups(objects: $objects) { returning { id } } }",
  "UNLINK_ALL_USER_GROUPS_FROM_PROFILE": "mutation unlinkAllUserGroupsFromProfile($profileId: uuid!) { delete_users_profile_user_groups(where: {user_profile_id: {_eq: $profileId}}) { returning { id } } }",
  "GET_USER_ROLE_BY_NAME": "query getUserRoles($roleName: String!) { shared_user_roles(where: {name: {_eq: $roleName}}) { id } }",
  "GET_USER_GROUPS": "query getUserGroups { users_groups { label id ldap_role } }",
  "UPDATE_USER_LAST_ACCESS_DATE": "mutation updateUserLastAccessDate($userUid: uuid!, $date: timestamptz) { update_shared_users(where: {uid: {_eq: $userUid}, profile: { is_deleted: { _eq: false } }}, _set: {last_access_at: $date, updated_at: $date}) { affected_rows } update_users_profiles(where: {user_id: {_eq: $userUid}, is_deleted: { _eq: false }}, _set: {updated_at: $date}) { affected_rows } }",
  "UPDATE_AVO_USER": "mutation updateUser($uid: uuid!, $user: shared_users_set_input!) { update_shared_users(where: {uid: {_eq: $uid}, profile: { is_deleted: { _eq: false } }}, _set: $user) { affected_rows } }",
  "HAS_CONTENT": "query hasContent($profileId: uuid) { has_public_collections: app_collections( limit: 1, where: { is_public: {_eq: true}, owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { id } has_private_collections: app_collections( limit: 1, where: { is_public: {_eq: false}, owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { id } has_assignments: app_assignments( limit: 1, where: { owner_profile_id: {_eq: $profileId}, is_deleted: { _eq: false } } ) { uuid } }",
  "GET_ACTIVE_USERS": "query getActiveUsers($where: shared_users_bool_exp!, $offset: Int!, $limit: Int!) { shared_users(where: {_and: [$where, {profile: {id: {_is_null: false}}}]}, offset: $offset, limit: $limit) { first_name last_name created_at       last_access_at      is_blocked idpmaps { idp } mail profile { id stamboek business_category is_exception profile_user_group { group { label id } } has_public_collections: collections(limit: 1, where: {is_public: {_eq: true}}) { id } has_private_collections: collections(limit: 1, where: {is_public: {_eq: false}}) { id } has_assignments: assignments(limit: 1) { id } profile_classifications { key } profile_contexts { key } profile_organizations { organization_id unit_id } } } }",
  "COUNT_ACTIVE_USERS": "query getAssignmentResponses($where: shared_users_bool_exp!) { shared_users_aggregate(where: $where) { aggregate { count } } }",
  "GET_COLLECTION_BY_ID": "query getCollectionById($id: uuid!) { app_collections(where: { id: { _eq: $id }, is_deleted: { _eq: false } }) { id description description_long collection_fragments(order_by: { position: asc }) { use_custom_fields updated_at start_oc position id external_id end_oc custom_title custom_description created_at collection_uuid type thumbnail_path } updated_at type_id type { label id } title note briefing_id thumbnail_path publish_at owner_profile_id profile { alias title alternative_email avatar id stamboek updated_at user_id user: usersByuserId { id created_at expires_at external_uid first_name last_name mail uid updated_at role { id name label } } created_at updated_at organisation { logo_url name or_id } } is_public external_id depublish_at published_at created_at lom_classification lom_context lom_intendedenduserrole lom_keywords lom_languages lom_typicalagerange updated_by { id user: usersByuserId { id first_name last_name role { id label } } } collection_labels { label id } relations(where: { predicate: { _eq: \"IS_COPY_OF\" } }) { object_meta { id title } } is_managed management { id current_status status_valid_until manager { full_name } actualised_at: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } approved_at: QC( where: { qc_label: { _eq: EINDCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id created_at } language_check: QC( where: { qc_label: { _eq: TAALCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status } quality_check: QC( where: { qc_label: { _eq: KWALITEITSCHECK } } order_by: { created_at: desc_nulls_last } limit: 1 ) { id qc_status } } } }",
  "GET_ITEMS_BY_IDS": "query getItemsByIds($ids: [bpchar!]!) { items: app_item_meta(where: {external_id: {_in: $ids}}) { id uid external_id duration title description thumbnail_path issued type { id label } organisation { name logo_url } relations(where: {predicate: {_eq: \"REPLACES\"}}) { created_at } item_collaterals(where: {description: {_eq: \"subtitle\"}}) { path description external_id } } }",
  "GET_COLLECTIONS_BY_IDS": "query getCollectionsByIds($ids: [uuid!]!) { items: app_collections(where: { id: { _in: $ids }, is_deleted: { _eq: false } }) { external_id id thumbnail_path updated_at organisation { logo_url name } title avo1_id collection_fragments_aggregate { aggregate { count } } } }",
  "GET_EXTERNAL_ID_BY_MEDIAMOSA_ID": "query getExternalIdByMediaMosaId($mediamosaId: String!) { migrate_reference_ids(where: { mediamosa_id: { _eq: $mediamosaId } }) { external_id id } }",
  "GET_COLLECTIONS_BY_AVO1_ID": "query getCollectionsByAvo1Id($avo1Id: String!) { items: app_collections(where: { avo1_id: { _eq: $avo1Id }, is_deleted: { _eq: false } }) { id } }",
  "GET_PUBLIC_COLLECTIONS_OR_BUNDLES": "query getPublicCollectionsOrBundles { app_collections(where: {is_public: {_eq: true}, is_deleted: { _eq: false }}) { id updated_at type_id } }",
  "GET_COLLECTIONS_LINKED_TO_ASSIGNMENT": "query getAssignmentLinkedToCollection($collectionUuid: String!, $assignmentUuid: uuid!) { app_assignments(where: {content_id: {_eq: $collectionUuid}, uuid: {_eq: $assignmentUuid}, is_deleted: { _eq: false }}, limit: 1) { uuid } }",
  "GET_CONTENT_PAGE_BY_PATH": "query getContentPageByPath($path: String!) { app_content(where: { path: { _eq: $path }, is_deleted: { _eq: false } }) { content_type content_width created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path user_profile_id profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at user_group_ids content_content_labels { content_label { id label link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } }",
  "GET_ITEM_TILE_BY_ID": "query getItemTileById($id: bpchar!) { obj: app_item_meta(where: { external_id: { _eq: $id } }) { created_at duration browse_path thumbnail_path title description issued organisation { name logo_url } type { label id } item_collaterals(where: {description: {_eq: \"subtitle\"}}) { path description external_id } view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_ITEM_MEDIA_PLAYER_INFO_BY_EXTERNAL_ID": "query getItemMediaPlayerInfoByExternalId($externalId: bpchar!) { app_item_meta(where: {external_id: {_eq: $externalId}}) { external_id browse_path thumbnail_path title description issued organisation { name logo_url } duration type { label } item_collaterals(where: {description: {_eq: \"subtitle\"}}) { path description external_id } } }",
  "GET_COLLECTION_TILE_BY_ID": "query getCollectionTileById($id: uuid!) { obj: app_collections(where: {id: {_eq: $id}, is_deleted: { _eq: false }}) { created_at title thumbnail_path type { label id } collection_fragments_aggregate { aggregate { count } } view_counts_aggregate { aggregate { sum { count } } } } }",
  "GET_CONTENT_PAGES_WITH_BLOCKS": "query getContentPagesWithBlocks( $where: app_content_bool_exp $offset: Int = 0 $limit: Int = 10 $orderBy: [app_content_order_by!] = {}, $labelIds: [Int!] = [], $orUserGroupIds: [app_content_content_labels_bool_exp] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { content_type created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at content_content_labels { content_label { id label link_to } } contentBlockssBycontentId(order_by: { position: asc }) { content_block_type content_id created_at id position updated_at variables enum_content_block_type { description value } } } app_content_aggregate(where: $where) { aggregate { count } } app_content_labels(where: {id: {_in: $labelIds}}) { id content_content_labels_aggregate(where: {_or: $orUserGroupIds}) { aggregate { count } } } }",
  "GET_CONTENT_PAGES_FOR_OVERVIEW_BLOCK": "query getContentPagesForOverviewBlock( $where: app_content_bool_exp, $offset: Int = 0, $limit: Int = 10, $orderBy: [app_content_order_by!] = {}, $labelIds: [Int!] = [], $orUserGroupIds: [app_content_content_labels_bool_exp] = {} ) { app_content(where: $where, limit: $limit, offset: $offset, order_by: $orderBy) { content_type created_at depublish_at description seo_description meta_description id thumbnail_path is_protected is_public path profile { user: usersByuserId { first_name last_name role { id label } } } publish_at published_at title updated_at user_group_ids user_profile_id content_content_labels { content_label { id label link_to } } } app_content_aggregate(where: $where) { aggregate { count } } app_content_labels(where: {id: {_in: $labelIds}}) { id content_content_labels_aggregate(where: {_or: $orUserGroupIds}) { aggregate { count } } } }",
  "GET_PUBLIC_CONTENT_PAGES": "query getPublicContentPages( $where: app_content_bool_exp ) { app_content(where: $where) { path updated_at } }",
  "UPDATE_CONTENT_PAGE_PUBLISH_DATES": "mutation publishContentPages($now: timestamptz, $publishedAt: timestamptz) {     publish_content_pages: update_app_content(       where: {         _or: [           {publish_at: {_lte: $now, _is_null: false}, depublish_at: {_gte: $now, _is_null: false}},           {publish_at: {_lte: $now, _is_null: false}, depublish_at: {_is_null: true}},           {publish_at: {_is_null: true}, published_at: {_gte: $now, _is_null: false}}         ],         published_at: {_is_null: true},         is_deleted: { _eq: false }       },       _set: {published_at: $publishedAt, is_public: true}     ) {       affected_rows     }     unpublish_content_pages: update_app_content(       where: {         depublish_at: {_lt: $now, _is_null: false},         is_public: {_eq: true}         is_deleted: { _eq: false }       },       _set: {is_public: false}     ) {       affected_rows     }   }",
  "GET_CONTENT_PAGES_BY_IDS": "query getContentAssetOwnerId($ids: [Int!]) { app_content(where: {id: {_in: $ids}, is_deleted: { _eq: false }}) { user_profile_id } }",
  "GET_CONTENT_PAGE_LABELS_BY_TYPE_AND_LABEL": "query getContentPageLabelsByTypeAndLabels($contentType: String!, $labels: [String!]!) { app_content_labels( where: { label: { _in: $labels }, content_type: { _eq: $contentType } } ) { label id } }",
  "GET_CONTENT_PAGE_LABELS_BY_TYPE_AND_ID": "query getContentPageLabelsByTypeAndIds($contentType: String!, $labelIds: [Int!]!) { app_content_labels(where: { id: { _in: $labelIds }, content_type: { _eq: $contentType } }) { label id } }",
  "GET_ASSIGNMENT_OWNER": "query getAssignmentOwnerId($assignmentUuid: uuid!) { app_assignments(where: {uuid: {_eq: $assignmentUuid}, is_deleted: { _eq: false }}) { owner_profile_id } }",
  "GET_COLLECTION_OWNER": "query getAssignmentOwnerId($collectionId: uuid!) { app_collections(where: {id: {_eq: $collectionId}, is_deleted: { _eq: false }}) { owner_profile_id } }",
  "INSERT_EVENTS": "mutation insertEventLogEntry($eventLogEntries: [avo_events_insert_input!]!) { insert_avo_events(objects: $eventLogEntries) { affected_rows } }",
  "GET_INTERACTIVE_TOUR_ROUTE_IDS": "query getInteractiveTourRouteIds { app_interactive_tour { page_id: page } }",
  "GET_INTERACTIVE_TOUR_WITH_STATUSES": "query getInteractiveTour( $routeId: String! $notificationKeyPrefix: String! $profileId: uuid! ) { app_interactive_tour(where: { page: { _eq: $routeId } }, order_by: { created_at: asc }) { steps id } users_notifications( where: { profile_id: { _eq: $profileId }, key: { _ilike: $notificationKeyPrefix } } ) { through_platform key } }",
  "GET_INTERACTIVE_TOUR_WITHOUT_STATUSES": "query getInteractiveTour($routeId: String!) { app_interactive_tour(where: { page: { _eq: $routeId } }, order_by: { created_at: asc }) { steps id } }",
  "GET_ITEM_THUMBNAIL_BY_EXTERNAL_ID": "query getItemThumbnailsByExternalIds($externalIds: [bpchar!]!) { app_item_meta(where: {external_id: {_in: $externalIds}}) { external_id thumbnail_path } }",
  "GET_NAVIGATION_ITEMS": "query getNavigationItems { app_content_nav_elements { content_path content_type link_target placement position id icon_name user_group_ids label updated_at description created_at content_id tooltip } }",
  "INSERT_ORGANIZATIONS": "mutation insertOrganizations($organizations: [shared_organisations_insert_input!]!) { insert_shared_organisations(objects: $organizations) { affected_rows } }",
  "DELETE_ORGANIZATIONS": "mutation deleteOrganizations { delete_shared_organisations(where: {}) { affected_rows } }",
  "GET_ORGANIZATIONS": "query getOrganisation($id: String!) { shared_organisations(where: {or_id: {_eq: $id}}) { or_id name logo_url } }",
  "GET_ITEM_BROWSE_PATH_BY_EXTERNAL_ID": "query getItemByExternalId($externalId: bpchar!) { app_item_meta(where: { external_id: { _eq: $externalId } }) { browse_path } }",
  "DELETE_PROFILE_OBJECTS": "mutation deleteProfileObjects($profileId: uuid!) { delete_users_profile_organizations(where: { profile_id: { _eq: $profileId } }) { affected_rows } delete_users_profile_contexts(where: { profile_id: { _eq: $profileId } }) { affected_rows } delete_users_profile_classifications(where: { profile_id: { _eq: $profileId } }) { affected_rows } }",
  "UPDATE_PROFILE_INFO": "mutation updateProfileObject( $educationLevels: [users_profile_contexts_insert_input!]! $subjects: [users_profile_classifications_insert_input!]! $organizations: [users_profile_organizations_insert_input!]! $company_id: String $profileId: uuid! $alias: String $title: String $alternativeEmail: String $avatar: String $bio: String $stamboek: String $is_exception: Boolean! $userUuid: uuid! $firstName: String $lastName: String $business_category: String $updatedAt: timestamptz! ) { insert_users_profile_contexts(objects: $educationLevels) { affected_rows } insert_users_profile_classifications(objects: $subjects) { affected_rows } insert_users_profile_organizations(objects: $organizations) { affected_rows } update_users_profiles( where: { id: { _eq: $profileId }, is_deleted: { _eq: false } } _set: { title: $title alternative_email: $alternativeEmail avatar: $avatar bio: $bio stamboek: $stamboek company_id: $company_id is_exception: $is_exception business_category: $business_category updated_at: $updatedAt } ) { affected_rows } update_alias: update_users_profiles( where: { id: { _eq: $profileId }, is_deleted: { _eq: false }, alias: {_neq: $alias} } _set: { alias: $alias } ) { affected_rows }  update_shared_users(  where: {uid: {_eq: $userUuid}, profile: { is_deleted: { _eq: false } }},  _set: {  first_name: $firstName,  last_name: $lastName, updated_at: $updatedAt  }  ) { affected_rows } }",
  "GET_COLLECTION_TITLE_AND_DESCRIPTION_BY_ID": "query getCollectionById($id: uuid!) {   app_collections(where: {id: {_eq: $id}, is_deleted: { _eq: false }}) {     is_public     title     description   } }",
  "GET_SITE_VARIABLES_BY_NAME": "query getSiteVariables($name: String!) { app_site_variables(where: {name: {_ilike: $name }}) { name value } }",
  "GET_PROFILES_BY_STAMBOEK": "query getProfilesByStamboek($stamboekNumber: String!) { users_profiles(where: {stamboek: {_eq: $stamboekNumber}, is_deleted: { _eq: false }}, limit: 1) { stamboek } }",
  "BULK_STRIP_USERS": "mutation bulkStripUsers($profileIds: [uuid!]!) { delete_users_email_preferences(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_idp_map(where: {local_user: {profile: {id: {_in: $profileIds}}}}) { affected_rows } delete_users_notifications(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_classifications(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_contexts(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_organizations(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_users_profile_user_groups(where: {user_profile_id: {_in: $profileIds}}) { affected_rows } delete_app_collection_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } delete_app_item_bookmarks(where: {profile_id: {_in: $profileIds}}) { affected_rows } update_users_profiles( where: {id: {_in: $profileIds}, is_deleted: { _eq: false }}, _set: { alias: null, alternative_email: null, avatar: null, bio: null, business_category: null, company_id: null, is_exception: false, stamboek: null, title: null } ) { affected_rows } update_shared_users( where: {profile: {id: {_in: $profileIds}}}, _set: { expires_at: null, is_blocked: null, role_id: null, type_label: null, } ) { affected_rows } }",
  "BULK_SOFT_DELETE_USERS": "mutation bulkSoftDeleteProfiles($profileIds: [uuid!]!) { update_users_profiles(where: {id: {_in: $profileIds}}, _set: {is_deleted: true}) { affected_rows } }",
  "GET_USER_BLOCK_EVENTS": "query getUserInfoFromEvents($profileId: String) { lastBlockAction: avo_events(where: {action: {_eq: \"activate\"}, object_type: {_eq: \"profile\"}, object: {_eq: $profileId}}) { created_at } lastUnblockAction: avo_events(where: {action: {_eq: \"deactivate\"}, object_type: {_eq: \"profile\"}, object: {_eq: $profileId}}) { created_at } }",
  "UPDATE_NAME_AND_MAIL": "mutation updateNameAndMail($profileId: uuid!, $firstName: String!, $lastName: String!, $mail: String!) { update_shared_users(where: {profile: {id: {_eq: $profileId}}}, _set: {first_name: $firstName, last_name: $lastName, mail: $mail}) { affected_rows } }",
  "UPDATE_MAIL": "mutation updateNameAndMail($profileId: uuid!, $mail: String!) { update_shared_users(where: {profile: {id: {_eq: $profileId}}}, _set: {mail: $mail}) { affected_rows } }",
  "BULK_GET_EMAIL_ADDRESSES": "query getEmailAddresses($profileIds: [uuid!]!) { shared_users(where: {profile: {id: {_in: $profileIds}}}) { uid mail } }",
  "SOFT_DELETE_PUBLIC_CONTENT_FOR_PROFILES": "mutation bulkSoftDeletePublicContentForProfiles($profileIds: [uuid!]!) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: true}}, _set: {is_deleted: true}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: true}}, _set: {is_deleted: true}) { affected_rows } }",
  "SOFT_DELETE_PRIVATE_CONTENT_FOR_PROFILES": "mutation bulkSoftDeletePrivateContentForProfiles($profileIds: [uuid!]!) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: false}}, _set: {is_deleted: true}) { affected_rows } update_app_assignments(where: {owner_profile_id: {_in: $profileIds}}, _set: {is_deleted: true}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: false}}, _set: {is_deleted: true}) { affected_rows } }",
  "TRANSFER_PUBLIC_CONTENT_FOR_PROFILES": "mutation bulkTransferPublicContentForProfiles($profileIds: [uuid!]!, $transferToProfileId: uuid!) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: true}}, _set: {owner_profile_id: $transferToProfileId}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: true}}, _set: {user_profile_id: $transferToProfileId}) { affected_rows } }",
  "TRANSFER_PRIVATE_CONTENT_FOR_PROFILES": "mutation bulkTransferPrivateContentForProfiles($profileIds: [uuid!]!, $transferToProfileId: uuid!) { update_app_collections(where: {profile: {id: {_in: $profileIds}}, is_public: {_eq: false}}, _set: {owner_profile_id: $transferToProfileId}) { affected_rows } update_app_assignments(where: {owner_profile_id: {_in: $profileIds}}, _set: {owner_profile_id: $transferToProfileId}) { affected_rows } update_app_collection_bookmarks(where: {profile_id: {_in: $profileIds}}, _set: {profile_id: $transferToProfileId}) { affected_rows } update_app_item_bookmarks(where: {profile_id: {_in: $profileIds}}, _set: {profile_id: $transferToProfileId}) { affected_rows } update_app_content(where: {user_profile_id: {_in: $profileIds}, is_public: {_eq: false}}, _set: {user_profile_id: $transferToProfileId}) { affected_rows } update_app_assignment_labels(where: {owner_profile_id: {_in: $profileIds}}, _set: {owner_profile_id: $transferToProfileId}) { affected_rows } update_app_content_assets(where: {owner_id: {_in: $profileIds}}, _set: {owner_id: $transferToProfileId}) { affected_rows } }",
  "BULK_UPDATE_USER_BLOCKED_STATUS_BY_PROFILE_IDS": "mutation updateUserBlockedStatus($profileIds: [uuid!]!, $isBlocked: Boolean!) { update_shared_users( where: { profile: { id: { _in: $profileIds } } } _set: { is_blocked: $isBlocked } ) { affected_rows } }",
  "GET_EMAIL_USER_INFO": "query getEmailUserInfo($profileIds: [uuid!]!) { users_profiles(where: {id: {_in: $profileIds}, is_deleted: { _eq: false }}) { id user: usersByuserId { mail } profile_user_group { group { label id } } } }",
  "GET_ITEM_BROWSE_PATHS_BY_IDS": "query getItemBrowsePathsById($ids: [bpchar!]) { app_item_meta(where: { external_id: { _in: $ids } }) { external_id, browse_path } }"
}