/* import shared library */
@Library('jenkins-shared-libs')_
def TEMPLATEPATH = 'https://raw.githubusercontent.com/viaacode/avo2-proxy/master/openshift/avo2-proxy-tmpl-dc.yaml'
def TEMPLATENAME = 'avo2-proxy'
def TARGET_NS = 'sc-avo2'
def templateSelector = openshift.selector( "template", "avo2-proxy")
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent {
      node {

        // spin up a pod to run this build on
        label 'nodejs'
      }
    }
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
    }
    stages {
        stage('preamble') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("sc-avo2") {
                            echo "Using project: ${openshift.project()}"
                            echo "We need anyuid for node"
			                         sh '''#!/bin/bash
                               echo this is setup by the bash script
                               #oc adm policy add-scc-to-user anyuid -n sc-avo2  -z default
                               '''
                               if (!openshift.selector("configmap", "proxy-qas").exists()) {
                               sh '''#!/bin/bash
                               oc project sc-avo2
                               oc process -p ENV=qas -f openshift/proxy-cfg-tmpl.yaml | oc apply -f -
                               '''
                               }
                               if (!openshift.selector("configmap", "proxy-tst").exists()) {
                               sh '''#!/bin/bash
                               oc project sc-avo2
                               oc process -p ENV=dev -f openshift/proxy-cfg-tmpl.yaml | oc apply -f -
                               '''
                               }
                               if (!openshift.selector("configmap", "proxy-prd").exists()) {
                               sh '''#!/bin/bash
                               oc project sc-avo2
                               oc process -p ENV=prd -f openshift/proxy-cfg-tmpl.yaml | oc apply -f -
                               '''
                               }


                        }
                    }
                }
            }
        }
        stage('check Install') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("sc-avo2") {
                            if (openshift.selector("buildconfig", "avo2-proxy").exists()) {

                            sh'''#!/bin/bash
                            echo starting a build
                            oc project sc-avo2
			                      oc start-build avo2-proxy --wait=true
                			      echo 'app exists apply changes to template and roll out dev'
                            oc -n sc-avo2 apply -f openshift/avo2-proxy-tmpl-dc.yaml
                            oc process -p ENV=dev -f openshift/avo2-proxy-tmpl-dc.yaml | oc apply -f -
                            '''
                            } else {sh'''#!/bin/bash
                                      echo "install tmpl"
                                      oc -n sc-avo2 apply -f openshift/avo2-proxy-tmpl-dc.yaml
                                      echo "templete installed , you can use it with add to project choose from project"
                                      oc project sc-avo2
                                      echo "start NEW build and follow"
                        				      oc new-build --name=avo2-proxy --strategy=docker .
                        				      oc logs -f bc/avo2-proxy
                                      echo "roll out  dev "
                                      oc process -p ENV=dev -f openshift/avo2-proxy-tmpl-dc.yaml | oc apply -f -
                                    '''
                              }
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('Tag ') {
     steps {
     // input message: "tag image for pod prd?: avo2-proxy:prd. Approve?", id: "approval"
         script {
             openshift.withCluster() {
                 openshift.withProject("sc-avo2") {
                      echo "Tag "
                      sh '''#/bin/bash
                    # oc -n sc-avo2  tag  avo2-proxy:latest  avo2-proxy:prd
                      oc -n sc-avo2  tag  avo2-proxy:latest  avo2-proxy:qas
                      '''
                 }
             }
         } // script
     } // steps
 } // stage
    } // stages
    post {
        always {
            script {
               slackNotifier(currentBuild.currentResult)
            }
        }
    }
} // pipeline
